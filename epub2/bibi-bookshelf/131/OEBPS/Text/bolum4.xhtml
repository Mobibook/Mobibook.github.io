<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title></title>
  <link href="../Styles/main.css" rel="stylesheet" type="text/css" />
  <link href="../Styles/fonts.css" rel="stylesheet" type="text/css" />
</head>

<body>
  <h1>IV. Bölüm<br />
  Doğruluk, Kanıt ve Sezgi</h1>

  <h2 id="u1a6f698b-7654-4d76-b690-3cd0a3bd07b5">Hilbert'in Matematik Programı</h2>

  <p>Doğru nedir? Dünya hakkında neyin doğru neyin yanlış olduğuna dair yargılarımızı nasıl oluştururuz? Sadece bazı <span style="font-style:italic;">algoritmayı</span> -kuşkusuz doğal seçimin güçlü etkinliğini daha az etkin algoritmalara yeğleyerek- uygulamakla mı yetiniriz? Doğrunun ulu katına ulaşabilen <span style="font-style:italic;">algoritma</span> dışında, bir başka yol -önsezi, içgüdü veya sezgi- var olamaz mı? Zor bir soruya benziyor bu. Yargılarımız, duygu-verileri, mantıksal işlem ve tahmin işlemlerinden oluşan karmaşık, içten-bağlantılı sistemlere dayanır. Ayrıca, dünya ile ilgili konularda neyin doğru neyin yanlış olduğu hakkında genel bir görüş birliği olmayabilir. Soruyu basite indirgemek için, sadece matema<span style="">tiks</span>el doğrulukla ilgilenelim. Matematik sorularıyla ilgili olarak yargılarımızı -belki hatta ‘belirli’ bilgimizi- nasıl oluştururuz? Böyle bir soru bize hiç olmazsa biraz daha açık seçik anlaşılabilir görünüyor. Neyin gerçekten doğru, neyin gerçekten yanlış olduğu gibi bir soruyu gerektirmiyor -yoksa gerektiriyor mu? Sahiden <span style="font-style:italic;">matematiksel</span> doğruluk nedir?</p>

  <p>Matematiksel doğruluk ile ilgili soru, eski Yunan felsefecilerine ve matematikçilerine -ve, kuşkusuz, daha da eskilere- kadar uzanan eski bir sorudur. Ancak, yaklaşık son yüz yılda, soruya açıklık getiren önemli aşamalar, çok ilginç <span style="font-style:italic;">yeni</span> sezgiler elde edilmiştir. İşte bu yeni gelişmeleri anlamaya çalışacağız. Düşünme sürecimizin gerçekten tümüyle algoritmaya dayalı olup olamıyacağı sorusuna parmak basan çok önemli konuları tartışacağız. Bu konularda uzlaşmaya varmamız bizim için önemlidir.</p>

  <p>On dokuzuncu yüzyılın sonlarında matematikçiler, matematiksel kanıtlama yöntemlerinin giderek daha güçlenmesinin de etkisiyle, büyük gelişmeler kaydetmişlerdi (Daha önce tanıştığımız David Hilbert ve Georg Cantor, daha sonra tanışacağımız büyük Fransız matematikçi Henri Poincaré, bu gelişmelerin öncüleridir). Böylece matematikçiler bu güçlü yöntemleri, giderek artan bir güvenle uygulamaya başlamışlardı. Yöntemlerin çoğunda, sonsuz elemanlı kümeler<a href="../Text/notbolum4.xhtml#nba4I" id="nba4Id"><sup>[I]</sup></a> dikkate alınıyor, kümelere gerçek ‘şeyler’ -potansiyel olarak varoluşlarının ötesinde, varoluşlarını tamamlamış bütünler- gözüyle bakmanın mümkün olduğu benimsendiği için kanıtlar çoğu kez başarılı oluyordu. Bu güçlü fikirlerin pek çoğu Cantor’un, tutarlı biçimde sonsuz kümeler kullanarak geliştirdiği <span style="font-style:italic;">sonsuz sayılar</span> kavramından kaynaklanmıştır (Bir önceki bölümde bu konuya şöyle bir göz atmıştık).</p>

  <p>Ancak, matematikçilerin yöntemlere duydukları güven, 1902’de İngiliz mantık bilimcisi ve felsefeci Bertrand Russell’ın ünlü ikilemini (Cantor tarafından da beklendiği gibi, ‘köşegen’ yönteminin doğrudan sonucu olarak) ortaya atmasıyla sarsıldı. Russell’ın tezini anlamak için önce, kümelerin tam bütünler olarak ele alınmasına ilişkin bir fikir edinmemiz gerekir. Belirli bir özellikle karakterize edilmiş herhangi bir <span style="font-style:italic;">küme</span> düşünelim. Örneğin, <span style="font-style:italic;">kırmızı</span> nesneler kümesi, kırmızılıkla karakterize edilir. Herhangi bir nesne yalnız ve yalnız kırmızılığa sahip ise bu kümeye ait olabilir. Bu durumda, bir tek nesneyi sahip olduğu bir özellikle tanımlayabiliyorsak, böyle nesnelerden oluşan kümenin tümü için aynı özelliği kullanabiliriz: ‘Kırmızılık’, bütün kırmı<span style="">zı</span> nesnelerin kümesidir (Diğer başka kümelerin de, böyle basit bir özellikle karakterize edilmeyen elemanlara sahip kümelerin de, ‘orada' yer aldığını algılayabiliriz).</p>

  <p>Kavramları, kümelerle tanımlama fikri, Alman mantık bilimcisi Gottlob Frege tarafından 1884’de ileri sürülen yöntemin özünü oluşturmuştur. Bu yöntemde <span style="font-style:italic;">sayılar,</span> kümelerle tanımlanmaktadır. Örneğin, gerçek 3 sayısı ne demektir? ‘Üçlük’ özelliğini biliyoruz ama 3’ün kendisi nedir? ‘Üçlük’, nesneler <span style="font-style:italic;">topluluğunun</span> bir özelliğidir, bir başka deyişle, kümelerin bir özelliğidir. Bir küme, yalnız ve yalnız üç elemandan oluşuyorsa bu küme ‘üçlük’ özelliğine sahip demektir. Örneğin, bir olimpiyat dalında madalya kazananlar kümesi, bu ‘üçlük’ özel-ligine sahiptir. Aynı şekilde, üç tekerlekli bisikletin tekerlekleri, normal yoncanın yaprakları, veya <span style="font-style:italic;">x<sup>3</sup> - 6 x<sup>2</sup>+</span> 11 x - 6 = 0 eşitliğinin yanıtlarının oluşturduğu kümeler de ‘üçlük’ özelliğine sahiptir. Öyleyse Frege’nin, gerçek 3 sayısı ile ilgili tanımı nedir? Frege’e göre 3, kümelerin bir kümesi olmalıdır: ‘Üçlük’ özelliğine sahip tüm kümelerin kümesi.<a href="../Text/notbolum4.xhtml#nb41" id="nb41d"><sup>[1]</sup></a> Buna göre bir küme, yalnız ve yalnız Frege’in 3 kümesine ait ise, üç elemana sahip olabilir.</p>

  <p>Bu biraz döngü gibi görünürse de, gerçekte değildir. <span style="font-style:italic;">Sayıları,</span> genel bir tanımlamayla, denk kümelerin toplamları olarak tanımlayabiliriz; burada ‘denk’ sözcüğü, birbiriyle bire bir eşlenebilen elemanlara sahip anlamındadır (Daha basit ifadeyle ‘aynı sayıda elemana sahip olmak’ demektir). Buna göre 3 sayısı, elemanları arasında, örneğin, bir elma, bir portakal ve bir armuttan oluşan bir küme bulunan kümelerden birisidir. Bu tanımın, <a href="../Text/bolum2.xhtml#sy83">önceden değinildiği gibi</a>, Church’ün ‘Ʒ’ tanımından çok farklı bir ‘3’ tanımı olduğuna dikkatinizi çekerim. Bugünlerde daha popüler olan başka tanımlar da vardır.</p>

  <p>Peki, Russell’ın ikileminden ne haber? Bu ikilem, aşağıda tanımlanan bir R kümesiyle ilgilidir:</p>

  <p>R, bizzat kendileri, kendi elemanı olmayan bütün kümelerin oluşturduğu kümedir.</p>

  <p>Bu tanıma göre R, kümelerin belirli bir koleksiyonudur; ve bir X kümesinin bu koleksiyon içerisinde yerini alması için gerekli kriter, X kümesinin kendinin, <span style="font-style:italic;">kendi</span> elemanları arasında yer almamasıdır.</p>

  <p>Bir kümenin gerçekten kendis<span style="">inin</span> bir elemanı olabileceğini varsaymak saçma mı? Hiç de değil. Örneğin, sonsuz kümelerden oluşan I kümesini <span style="font-style:italic;">(sonsuz</span> sayıda birçok elemandan oluşan kümeler) ele alalım. Elbette sonsuz olarak çok sayıda <span style="font-style:italic;">farklı</span> sonsuz kümeler vardır, bu nedenle, I'ın kendisi de sonsuzdur; I gerçekten kendine aittir! Öyleyse nasıl oluyor da Russell’ın anlayışı bizi bir ikilemle karşı karşıya bırakıyor? Soruyoruz: Russell’ın ‘R’ kümesi kendinin elemanı mıdır, yoksa değil midir? Değilse R’ye ait olmalıdır çünkü R, tamamiyle, kendi kendilerinin elemanı olmayan kümelerden oluşur. Buna göre R, sonuçta R’ye aittir -işte bir çelişki! Diğer taraftan R, kendisinin bir elemanı ise, ‘kendisinin’ sözcüğü bizzat R’yi ifade ettiğine göre R, elemanlarının bizzat kendilerince temsil edilmediği kümeye aittir, yani kendinin elemanı değildir -işte yine bir çelişki!<a href="../Text/notbolum4.xhtml#nba4II" id="nba4IId"><sup>[II]</sup></a></p>

  <p>Bu, hiç de hafife alınacak bir uslamlama değildir. Russell, matematikçilerin kanıtlarında kullanmaya başladıkları dönemde küme-teorik uslamlamasını oldukça aşırı şekilde kullanmaktaydı. İşlerin kontrolden çıktığı açıkça görülüyordu ve ne çeşit bir usavarımın uygulanmasının doğru olacağı konusunda daha titiz davranmak gerekiyordu. Kullanılacak uslamlama yöntemi ikilem yaratmamalıydı ve evvelce gerçek oldukları bilinen ifadelerden yalnız doğru ifadeler çıkarılmalıydı. Russell, meslektaşı Alfred North Whitehead ile birlikte, aksiyomlardan ve yöntemsel kurallardan oluşan son derece biçimsel bir matematik sistemini geliştirmeye girişti. Amaç, her çeşit doğru matematiksel usla<span style="">m</span>lamanın kendi projelerine uygulanabilirliğini kanıtlamaktı. Russell’ın kendi paradoksuna yol açan ikilemli usavarımlardan sakınmak için kurallar dikkatle seçildi. Russell ve Whitehead’ın birlikte ürettikleri özel proje çok büyük bir yapıttı. Ancak, çok zahmetli bir uğraştı ve sonunda projenin kendi kapsamında yer alan uslamlama yöntemleriyle sınırlı kaldı. II. Bölüm’de tanıştığımız büyük matematikçi David Hilbert, daha uygulanabilir ve kapsamlı bir projeye başladı. Proje kapsamına, herhangi bir matematik alanı ile ilgili tüm doğru matematiksel uslamlama çeşitleri dahil edilecekti. Ayrıca Hilbert projenin çelişkiden uzak olduğunu kanıtlamanın da mümkün olacağını düşünüyordu. Böylece matematikçiler, sonsuza kadar, sarsılmaz bir temel üzerine oturabileceklerdi.</p>

  <p>Ancak Hilbert ve arkadaşlarının umutları, 1931’de, 25 yaşlarında zeki bir Avusturyalı matematik mantıkçısı olan Kurt Gödel’in, Hilbert’in programını altüst eden teoremiyle söndü. Gödel’in teoremi şöyleydi: Aksiyomlardan ve yöntemsel kurallardan veya benzerlerinden oluşan herhangi bir kesin (‘biçimsel’) matematik sistemi, basit aritmetik teoremlerinin tanımlamalarını (II. Bölüm’de değinilen 'Fermat’ın son teoremi’ gibi) kapsayacak kadar geniş kapsamlı olması ve çelişkisiz olması koşuluyla, sistemin kapsamına alınan yöntemlerle ne kanıtlanabilir ne de kanıtlanamaz bazı bildirimleri içermelidir. Buna göre, bu gibi bildirimlerin doğruluğu hakkında, onaylı yöntemlerle ‘karar verilemez’. Gödel, gerçekte, uygun bir aritmetik teoremi şeklinde kodlandığında aksiyom sisteminin tutarlılığının bildiriminin ‘karar verilemez’ yöntem olduğunu kendiliğinden kanıtladığını göstermiştir. Söz konusu ‘karar verilemezlik’ kavramının özünü anlamak bizim için önemli olacaktır. Gödel teoreminin, Hilbert’in programım nasıl altüst ettiğini göreceğiz. Gödel teoreminin, aynı zamanda, sezgimizi kullanarak, herhangi bir formel matematik sisteminin sınırlarını aşmamızı nasıl sağladığını da göreceğiz. Bunları anlayabilmemiz, bundan sonra ele alacağımız konular açısından son derece önemlidir.</p>

  <h2 id="u42cbac40-8909-4ca8-b1e4-1e7308bf663c">Formel Matematik Sistemleri</h2>

  <p>‘Aksiyomlardan ve yöntemsel kurallardan oluşan formel matematik sistemi’ ile ne kastettiğimizi biraz daha açıklamamız gerekecek. Matematiksel bildirimlerimizi ifade etmek için kullandığımız bir çeşit simgeler alfabesine sahip olduğumuzu varsayalım. Bu simgeler, ‘aritmetiği’ sistemimize dahil edebilmemiz için, doğal sayılardan oluşan bir kodlama sistemine de olanak sağlamalıdır. Kuralların tanımlanmasını gerektiğinden fazla karmaşık hale getirse de, bilinen 0, 1, 2, 3, ..., 9, 10, 11, 12, ... rakam sistemini kullanabiliriz. Doğal sayıların açılımını göstermek için, örneğin, 0, 01, 011, 0111, 01111,... gibi daha basit bir açılımı kullanabiliriz (veya, ortak bir noktada uzlaşalım diyorsanız, ondalık sistemi de kullanabiliriz). Ancak, diğer kodlama sistemleri, açıklamalarımızda bazı karışıklıklara neden olabilir endişesiyle ben tanımlamalarımda, yukarıdaki standart kodlama sisteminden vazgeçmeyeceğim. ‘Kelimeleri’ veya ‘sayıları’ ayırmak için bir ‘ara’ sembolüne de gereksinim duyabiliriz ama biz yine basit yolu seçerek virgül (,) kullanacağız. ‘Değişken’ doğal sayıları (veya tam sayıları, rasyonel sayıları, vb. ama yine de burada doğal sayılara bağlı kalalım) gösteren <span style="font-style:italic;">t, u, v, w, y, z, t', t", t'",...</span> gibi harfler kullanmamız gerekecek. Bir ifadede ortaya çıkabilecek değişken sayıların adedini sınırlamamak için <span style="font-style:italic;">t', t",...</span> gibi harflere ihtiyacımız olabilir. <span style="font-style:italic;">Simgelerin</span> gerçek adedinin sonsuz olabilmesi amacıyla, (') işaretim, formel sistemin ayrı bir simgesi olarak kabul ediyoruz. Aritmetik işlemleri için =, +, x, vs.; çeşitli parantezler (,) [;]; <span style="font-style:italic;">mantıksal</span> simgeler için &amp; (‘ve’) ; =&gt; (‘gerektirir’); ve (‘veya’), &lt;=&gt; (yalnız ve yalnız); ~ (‘değil’ veya böyle değilse...’) gibi simgeler gerekecektir. Ayrıca, mantık nicelik göstergelerine, ‘niceleyici’lerine, ihtiyaç vardır: varolma niceleyicisi Ǝ (‘vardır... şöyle ki’) ve evrensel niceleyici ∀ (‘tümü için ... sahibiz’). Buna göre, ‘Fermat'ın son teoremi’ gibi bildirimler yazabiliriz:</p>

  <p>~ ∀ w,x,y,z [(x + 1)<sup>w+3</sup> + (y + 1)<sup>w+3</sup> = (z +1)<sup>w+3</sup>]</p>

  <p>(<a href="../Text/bolum2.xhtml">bkz. II. Bölüm</a>). (‘3’ü göstermek için ‘0111’ yazabilirdim ve biçimsel sisteme daha uygun olabilecek “kuvvetini alma” kod sistemi kullanabilirdim; fakat, dediğim gibi, gereksiz karışıklıklardan kaçınmak amacıyla alışılagelmiş simgeleri kullanmakta ısrarlıyım). Yukarıdaki bildirim (ilk köşeli parantezde son bulan) şöyle okunur:</p>

  <p>"...eşitliğini sağlayan <span style="font-style:italic;">w, x,</span> y, z doğal sayıları yoktur.”</p>

  <p>∀ simgesini kullanarak Fermat’ın son teoremini yeniden şu şekilde de yazabiliriz:</p>

  <p>∀ <span style="font-style:italic;">w,x,y,z</span> [~ <span style="font-style:italic;">(x</span> +1)<sup>w+3</sup> + (y + 1)<sup>w+3</sup> = <span style="font-style:italic;">(z +</span> 1)<sup>w+3</sup>]</p>

  <p>Mantık açısından yukarıdaki okumayla aynı anlamda olmak üzere şöyle okuruz:</p>

  <p>‘Hiçbir <span style="font-style:italic;">w, x,</span> y, z doğal sayısı... eşitliğini sağlamaz.’</p>

  <p>Teoremlerin tümünü gösterebilmek için harflerin kullanılması gerekiyor. Bu amaçla P, Q, R, S... gibi büyük harfler kullanacağım. Yine Fermat'ın teoremine uygulayalım:</p>

  <p><span style="font-style:italic;">F =</span> ~ Ǝ w,x,y,z [(x + 1)<sup>w+3</sup> + <span style="font-style:italic;">(y +1</span>)<sup>w+3</sup> = (z + 1)<sup>w+3</sup>].</p>

  <p>Bir teorem, birden fazla değişkene de bağımlı olabilir; örneğin, Fermat önermesiyle belli bir <span style="font-style:italic;">w</span> + 3 kuvveti için ilgilenebiliriz:<a href="../Text/notbolum4.xhtml#nba4III" id="nba4IIId"><sup>[III]</sup></a></p>

  <p><span style="font-style:italic;">G(w) = ~ Ǝ x,y,z [(x + l)<sup>w+3</sup> + (y + 1)<sup>w+3</sup> = (z + 1)<sup>w+3</sup>]</span></p>

  <p>Buna göre G(0), ‘hiçbir sayının küpü iki artı işaretli sayının küplerinin toplamı olamaz’ tezini ortaya koyarken G(l) aynı tezi dördüncü kuvvetler için savunur, vb. (‘Ǝ’den sonra '<span style="font-style:italic;">w</span>’ in bulunmayışına dikkatinizi çekerim). Bu haliyle Fermat teoremi, G(w), tüm <span style="font-style:italic;">w</span> değerleri tarafından sağlanır şeklinde önerilebilir:</p>

  <p><span style="font-style:italic;">F = ∀</span> w[G(w)]</p>

  <p>G(), bir önergesel fonksiyona, yani bir veya daha fazla değişkene bağımlı önermeye örnektir.</p>

  <p>Sistemin aksiyomları, simgelerin anlamları verildiğinde, doğruluğu kendini-kanıtlar nitelikte ortaya çıkacağı varsayılan genel önermelerden oluşan bitimli bir liste üretecektir. Örneğin, aksiyomlarımız arasında bulunabilecek önermeler veya önergesel fonksiyonlar P, Q, R () şunlar olabilir:</p>

  <p><span style="font-style:italic;">(P&amp;Q)=&gt;P,</span> ~ <span style="font-style:italic;">(~ P)</span> &lt;=&gt; <span style="font-style:italic;">P,</span></p>

  <p>~ Ǝ[R(x)] ∀[~ <span style="font-style:italic;">R(x)]</span></p>

  <p>Bu fonksiyonların ‘kendiliğinden kanıtlanmış doğruluğu' anlamlarından hemen bulunabilir (Birinci önerme: T ve Q’nün her ikisi de doğruysa, P doğrudur; ikinci önerme: ‘P’nin doğru olmadığı doğru değildir’ ile T doğrudur’ önermelerinin özdeşliğini savunur; üçüncü önerme, Fermat’ın son teoremini ifade eden iki yöntem arasındaki mantıksal eşitliği örnekler. Aşağıdaki gibi bazı temel aritmetik aksiyomları da listeye dahil edebiliriz:</p>

  <p>∀ <span style="font-style:italic;">x,y[x+y=y+x]</span></p>

  <p>∀<span style="font-style:italic;">x,y,z[(x</span> + <span style="font-style:italic;">y)</span> x <span style="font-style:italic;">z</span> = <span style="font-style:italic;">(x</span> x <span style="font-style:italic;">z) + (y</span> x <span style="font-style:italic;">z)]</span></p>

  <p>Ancak, bu aritmetik işlemleri daha basit aksiyomlarla inşa ederek bunlardan uslamlama yöntemiyle elde edilecek bildirimleri teoremler olarak nitelemek tercih edilebilir. Yöntemin (kendini-kanıtlar) kuralları şöyle ifade edilebilir:</p>

  <p>‘P’den ve <span style="font-style:italic;">P</span> =&gt; <span style="font-style:italic;">Q</span> aksiyomundan Q’u uslamlama ile elde edebiliriz.’</p>

  <p>‘∀<span style="font-style:italic;">x [R (x)]</span> aksiyomundan, R(x)’deki x yerine bir doğal sayı kullanılarak herhangi bir önermeyi uslamlama yöntemiyle elde edebiliriz.’</p>

  <p>Bütün bunlar, inşa edilmiş olan önermelerden yeni önermeleri nasıl elde edebileceğimizi gösteren komutlardır.</p>

  <p>Şimdi aksiyomlardan hareketle ve yöntemin kurallarını tekrar tekrar uygulayarak uzun bir önermeler listesi hazırlayabiliriz. Herhangi bir aşamada aksiyomları tekrar sahneye çıkarır, uzayıp giden listemize dahil etmiş olduğumuz önermelerden herhangi birini tekrar tekrar kullanmaya devam edebiliriz. Böyle doğru bir şekilde inşa edilen bir listeye dahil önermeler <span style="font-style:italic;">teorem</span> adıyla anılır (ancak bunların pek çoğu, matematiksel bildirimler olarak önemsizdirler veya ilginç değillerdir). Kanıtlamak istediğimiz belirli bir P önermesine sahipsek, kurallara göre yapılandırılmış ve bizim P önermemiz ile son bulan böyle bir liste bulmalıyız. Liste sayesinde, P’nin <span style="font-style:italic;">kanıtını</span> sistemin içerisinde bulabiliriz; ve P, böylece, bir teorem olabilir.</p>

  <p>Hilbert’in programının amacı, matematiğin herhangi bir iyi-tanımlanmış alan ile ilgili <span style="font-style:italic;">her çeşit</span> doğru matematiksel uslamlama yöntemini içine alacak kadar geniş kapsamlı bir aksiyomlar ve yöntemsel kurallar listesi yaratmaktı. Bizim matematik alanımız <span style="font-style:italic;">aritmetik</span> olsun (Fermat’ın son teoremi gibi bildirimlerin yapılabilmesi için Ǝ ve ∀ gibi niceleyici göstergelerin yer aldığı bir alan). Konumuzla ilgili olarak aritmetikten daha uygun bir alan bulamayız. Çünkü aritmetik, Gödel’in yönteminin uygulanabileceği kadar genel kapsamlı bir alandır. Hilbert’in programına uygun olarak, geniş kapsamlı bir aksiyomlar ve yöntemsel kurallar sistemine sahip olursak, herhangi bir aritmetik önermesi ile ilgili matematiksel kanıtın ‘doğruluğuna’ ait kesin kritere de sahip oluruz. Böyle bir aksiyomlar ve kurallar sisteminin, sistem çerçevesinde formüle edilebilen <span style="font-style:italic;">herhangi bir</span> matematik bildiriminin doğru olup olmadığına prensipte karar verebilmeyi sağlayacak kadar <span style="font-style:italic;">bütünlük</span> taşıdığı ümit edilmekteydi.</p>

  <p>Hilbert ise, bir matematik önermeyi, diyelim P'yi, temsil eden bir simgeler dizisi için, P’nin doğru olup olmadığına bağlı olarak, ya P veya ~ P’nin kanıtlanabileceğini umuyordu. Simgeler dizisinin, ‘dizim’ açısından doğru, yani formalizmin tüm kurallarını -çift parantezlerin, vs. doğru yerleştirilmesi gibi- yerine getiren ‘söz dizimi / sintaks’ açısından doğru olduğunu varsaymak zorundayız. Ancak bu durumda P, iyi-tanımlanmış doğru veya yanlış anlama sahip olabilir. Hilbert’in ümidi gerçekleşseydi, önermelerin anlamı ile ilgili endişelerimizden tümüyle kurtulabilirdik! P, dizim bakımından doğru bir simgeler dizisi olurdu. P bir teorem ise (yani, sistemin içerisinde kanıtlanabiliyorsa) onu, doğruluk değeri doğru olarak, ~ P bir teorem olduğu taktirde onu, doğruluk değeri yanlış olarak niteleyebilirdik. Bunun bir anlam taşıması için, dizinin eksiksiz olmasının yanısıra <span style="font-style:italic;">tutarlı</span> o<span style="">lm</span>asına da ihtiyacımız vardır. Başka bir deyişle, P ve ~ P’nin her ikisinin de teoremler olarak yer aldığı bir P simgeler dizisi bulunmamalıdır. Aksi halde P, aynı zamanda hem <span style="font-weight:bold;">doğru</span> hem de <span style="font-weight:bold;">yanlış</span> olur!</p>

  <p>Matematiksel bildirimlere, formel bir matematik sisteminde yer alan simge dizilerinden başka hiçbir şey olmadıkları gözüyle bakmak suretiyle anlamlarından kurtulma görüşü, matematiğin <span style="font-style:italic;">formalizme</span> veya biçimselliğe bakış açısıdır. Bu görüşü benimseyenler için matematik bir çeşit ‘anlamsız oyun’dur. Ancak bu görüşler bana çekici gelmiyor. Matematiğe özünü kazandıran -kör algoritma işlemleri değil- ‘anlam’dır. Neyse ki Gödel formalizme ezici bir darbe indirdi! Bunu nasıl yaptı, görelim.</p>

  <h2 id="uca3175e1-94c4-4b10-95ee-41b3161a83dd">Gödel Teoremi</h2>

  <p>Gödel'in tartışmalarının bir kısmı çok ayrıntılı ve karmaşıktı. Ancak, bunların girdisini çıktısını incelememiz gerekmiyor. Öte yandan ana fikir, çok basit, güzel ve geniş kapsamlıydı. Teoremin karmaşık kısmı (bu kısım da büyük bir beceri eseriydi), formel sistemin her bir kuralının, ve çeşitli aksiyomlarının aritmetik işlemlerine nasıl kodlanacağını gösteriyordu (Teoremin ana fikr<span style="">inin</span> geniş kapsamlı olmasının bir nedeni de, böyle bir kodlamanın yapılabilecek en verimli çalışmalardan birisi olduğunu anlamasıydı). Kodlamayı uygulamak için, önermeleri doğal sayılarla etiketlemenin bir yolunu bulmamız gerekiyor. Bu yollardan birisi, dizinin uzunluğuna göre genel bir sıralamanın her bir belirli uzunluğu için, formel sistemin tüm simge dizilerine sadece bir çeşit 'alfabetik’ sıralamanın uygulanmasıdır (Böylece, alfabetik sıraya dizilmiş birim uzunlukta dizileri, yine alfabetik sırada iki birim uzunlukta diziler ve bunları üç birim uzunlukta diziler, vb. izleyebilir). Bu sıralamaya leksikografik sıralama<a href="../Text/notbolum4.xhtml#nba4IV" id="nba4IVd"><sup>[IV]</sup></a> adı verilir. Aslında Gödel daha karmaşık bir numaralama sistemi kullanmıştır, fakat, bu gibi farklar bizim için önemli değildir. Bizi özellikle ilgilendiren konu, yukarıda değinilen G(w) gibi tek değişkene bağlı önergesel fonksiyonlardır. Şimdi n’inci önergesel fonksiyonu (simgeler dizisinin seçilen sıralamasında) w<span style="font-style:italic;">'e</span> uygulayalım;</p>

  <p><span style="font-style:italic;">P<sub>n</sub> (w).</span></p>

  <p>İstersek numaralama sistemimizi biraz ‘gelişigüzel’ düzenleyerek bazı ifadelerin dizim bakımından doğru olmamasını sağlayabiliriz (Bu durumda, dizimsel yönden doğru dizime sahip olmayan ifadeleri kodlama sisteminden atmaya çalışmaktan çok daha kolay bir aritmetik kodlama sağlıyabiliriz). P„ <span style="font-style:italic;">(w)</span> dizim ba<span style="text-decoration:line-through;">kımı</span>ndan doğru ise, <span style="font-style:italic;">n ve w</span> doğal sayıları ile <span style="">ilgili</span> son derece iyi tanımlanmış bir aritmetik bildirimi olacaktır. Tam olarak hangi aritmetik bildirimi olduğu, kullanılacak numaralama sisteminin detaylarına bağlı olacaktır. Bu konu, teoremin karmaşık kısmının kapsamına girmekte ve burada ele aldığımız konu ba<span style="text-decoration:line-through;">kımı</span>ndan bizi ilgilendirmemektedir. Sistemdeki bir teoremin kanıtını oluşturan önermeler dizileri, tercih edilen sıralama planı kullanılarak, doğal sayılarla da etiketlenebilir.</p>

  <p>П<sub>n <a id="bookmark6"></a></sub>sayısı, n’inci kanıtı göstersin (Yine, ‘gelişigüzel bir numaralama’ kullanabiliriz ve buna göre, <span style="font-style:italic;">n</span>’in bazı değerleri ile ilgili <span style="font-style:italic;">n</span> ifadesi dizim açısından doğru olmayacak ve bu nedenle hiçbir teoremi kanıtlamayacaktır).</p>

  <p>Şimdi, <span style="font-style:italic;">w</span> doğal sayısına bağlı aşağıdaki önergesel fonksiyonu ele alalım:</p>

  <p>~ Ǝ <span style="font-style:italic;">x[П<sub>x</sub></span> kanıtlar P<sub>w</sub>(w)].</p>

  <p>Köşeli parantezler içerisindeki bildirim kısmen kelime kullanılarak verilmiş olmasına karşın mükemmel ve tam olarak tanımlanmış bir bildirimdir: x’ci kanıtın gerçekte, <span style="font-style:italic;">w</span> değerine uygulanan P<sub>w</sub> ( ) önermesinin bir kanıtı olduğunu savunmaktadır. Köşeli parantezin dışındaki 3, değişkenlerden birini bildirimden çıkarma görevini üstlenmiştir ('... önermesini sağlayan <span style="font-style:italic;">x</span> mevcut değildir’) ve bu nedenle, yalnız bir değişkene, <span style="font-style:italic;">w’e,</span> bağımlı bir önergesel aritmetik fonksiyonu elde etmiş oluruz. Bu bildirim, bir bütün olarak, P<span style="font-style:italic;"><sub>w</sub>(w)</span> ifadesinin kanıtının bulunmadığını savunur. Ben bu ifadenin dizim açısından doğru söz dizimine sahip olduğu kanısındayım (P<span style="font-style:italic;"><sub>w</sub></span>(<span style="font-style:italic;">w</span>) gramer açısından doğru ifade edilmemiş olsa da bu kanıdayım; dizimi yanlış ifade edilmiş bir ifadenin kanıtı olmayacağı için, P<span style="font-style:italic;"><sub>w</sub></span>(<span style="font-style:italic;">w</span>)’in doğru ifade edilmesi durumunda ifadenin tamamı da doğru olurdu). Gerçekte, uygulanmakta olduğunu varsaydığımız gibi, <span style="font-style:italic;">aritmetik</span> bildirimlere çevirme işlemi nedeniyle yukarıdaki bildirim, <span style="font-style:italic;">w</span> doğal sayısı ile ilgili bir aritmetik bildirimidir (köşeli parantez içerisinde yer alan bildirim, iki doğal sayı, <span style="font-style:italic;">x</span> ve <span style="font-style:italic;">w,</span> ile ilgili iyi-tanımlanmış bir aritmetik bildirimidir). Bildirimin aritmetiğe kodlanabileceğinin açıkça görüldüğü söylenemez ama kodlanabilir. Bu gibi bildirimlerin aritmetiğe kodlanabileceğini kanıtlamak, Gödel’in tezinin karmaşık kısmının kapsamında yer alan en önemli ‘zor iş’tir. Daha önce belirttiğimiz gibi, kesinlikle <span style="font-style:italic;">hangi</span> aritmetik bildirimi olduğu, numaralama sistemlerinin detaylarına ve daha çok, aksiyomların detaylı yapısına ve formel sistemi<span style="">mi</span>zin yapısına bağlı olacaktır. Bütün bunlar, teoremin karmaşık kısmına ait olduğu için ayrıntıları bizi burada ilgilendirmiyor.</p>

  <p>Tek değişkene bağlı tüm önergesel fonksiyonları numaraladık; bu nedenle, biraz önce yazmış olduğumuz fonksiyona bir sayı vermemiz gerekiyor. Bu sayı <span style="font-style:italic;">‘k’</span> olsun. Önergesel fonksiyonumuz, listede <span style="font-style:italic;">k</span>’ci olarak yerini alır. Buna göre,</p>

  <p>~ Ǝ <span style="font-style:italic;">x[П<sub>x</sub></span> kanıtlar P<sub>w</sub>(w)] = P<span style="font-style:italic;"><sub>k</sub></span>(w)</p>

  <p>olacaktır. Şimdi, bu fonksiyonu özel bir <span style="font-style:italic;">w</span> değeri; <span style="font-style:italic;">w</span> = <span style="font-style:italic;">k</span> için incelersek, aşağıdaki önermeyi elde ederiz:</p>

  <p>~ Ǝ <span style="font-style:italic;">x[П<sub>x</sub></span> kanıtlar P<span style="font-style:italic;"><sub>k</sub></span>(<span style="font-style:italic;">k</span>)] = P<span style="font-style:italic;"><sub>k</sub></span>(<span style="font-style:italic;">k</span>)</p>

  <p>P<span style="font-style:italic;"><sub>k</sub></span> (<span style="font-style:italic;">k</span>) önermesi iyi tanımlanmış (doğru söz dizimine sahip) bir aritmetik bildirimidir. Formel sistemimizde bir kanıtı var mıdır? Olumsuz ifadesi ~ P<span style="font-style:italic;"><sub>k</sub></span>(<span style="font-style:italic;">k</span>)'nin bir kanıtı var mıdır? Her iki sorunun da yanıtı 'hayır' olmalıdır. Gödel’in yönteminin temelinde yatan <span style="font-style:italic;">anlamı</span> inceleyerek, yanıtın ‘hayır’ olması gerektiğini anlayabiliriz. P<span style="font-style:italic;"><sub>k</sub></span>(<span style="font-style:italic;">k</span>) sadece bir aritmetik önerme olsa da, eşitliğin sol tarafına yazdığımız: 'P<span style="font-style:italic;"><sub>k</sub></span>(<span style="font-style:italic;">k</span>) önermesinin, sistem içerisinde, kanıtı yoktur’, ifadesini savunmak amacıyla inşa edilmiştir. Aksiyomlarımızı ve yöntem kurallarını dikkatle yerleştirdiysek ve numaralama işlemimizi doğru yaptıysak, P<span style="font-style:italic;"><sub>k</sub></span>(<span style="font-style:italic;">k</span>) Önermesinin sistem içerisinde herhangi bir kanıtı olamaz. Çünkü, böyle bir kanıt olsaydı, P<span style="font-style:italic;"><sub>k</sub></span>(<span style="font-style:italic;">k</span>) önermesinin kendi savunduğu bildirimin anlamı, yani ‘kanıt yoktur' anlamı, yanlış olurdu ve bu nedenle P<span style="font-style:italic;"><sub>k</sub></span>(<span style="font-style:italic;">k</span>), bir aritmetik önerme olarak yanlış olurdu. Formel sistemimiz, yanlış önermeleri kanıtlayacak kadar kötü inşa edilmiş olamaz! Bu nedenle gerçek, P<span style="font-style:italic;"><sub>k</sub></span>(<span style="font-style:italic;">k</span>) önermesinin kanıtının olmamasıdır. Ama zaten P<span style="font-style:italic;"><sub>k</sub></span>(<span style="font-style:italic;">k</span>) önermesinin bize anlatmaya çalıştığı da budur. Böylelikle, P<span style="font-style:italic;"><sub>k</sub></span>(<span style="font-style:italic;">k</span>) önermesinin savunduğu doğru bir bildirim olmalıdır ve P<span style="font-style:italic;"><sub>k</sub></span>(<span style="font-style:italic;">k</span>) bir aritmetik önerme olarak doğrudur. <span style="font-style:italic;">Sistem içerisinde kanıtı bulunmayan doğru</span> bir önerme bulmuş olduk!</p>

  <p><span style="font-style:italic;">Olumsuz önerme</span> ~ P<span style="font-style:italic;"><sub>k</sub></span>(<span style="font-style:italic;">k</span>) hakkında nasıl bir yargıya varmamız gerekir? Biraz önce P<span style="font-style:italic;"><sub>k</sub></span>(<span style="font-style:italic;">k</span>) doğru ise ~ P<span style="font-style:italic;"><sub>k</sub></span>(<span style="font-style:italic;">k</span>) önermesinin yanlış olması gerektiğini kanıtlamıştık ve bizden, sistem içerisindeki yanlış önermeleri kanıtlamamız bekleniyor! Bu nedenle, ne P<span style="font-style:italic;"><sub>k</sub></span>(<span style="font-style:italic;">k</span>) ne de ~ P<span style="font-style:italic;"><sub>k</sub></span>(<span style="font-style:italic;">k</span>)<span style="font-style:italic;">,</span> formel sistemimiz çerçevesinde kanıtlanabilir. İşte Gödel teoremi budur.</p>

  <h2 id="uebacc501-7610-4bfc-baf4-4633eb814bf5">Matematiksel Sezgi</h2>

  <p>Bu aşamada çok ilginç bir konunun ortaya çıktığı görülüyor. İnsanlar çoğu kez, Gödel teoreminin, biçimselleştirilmiş matematiksel uslamlamanın gerekli sınırlarını gösteren olumsuz bir tez olduğunu sanırlar. Ne kadar geniş kapsamlı olduğumuzu düşünürsek düşünelim yine de ağın gözlerinden kaçıp gidecek önermeler daima bulunacaktır. Fakat, P<span style="font-style:italic;"><sub>k</sub></span>(<span style="font-style:italic;">k</span>) önermemiz için bu konuda kaygılanmaya gerek var mı? Yukarıdaki savunmamız sonucunda P<span style="font-style:italic;"><sub>k</sub></span>(<span style="font-style:italic;">k</span>) önermesinin gerçekten doğru bildirim olduğunu kanıtladık bile! Sistem kapsamında formel olarak kanıtlanamamasına karşın P<span style="font-style:italic;"><sub>k</sub></span>(<span style="font-style:italic;">k</span>)’nin doğru olduğunu anlayabildik. Matematiksel formalizmi ne pahasına olursa olsun savunanlar gerçekten kaygılanmaklar, çünkü uygula<span style="">d</span>ı<span style="">ğım</span>ız uslamlamayla, formalistlerin ‘doğru’ hakkındaki görüşlerinin eksik olduğunu gösterdik. Aritmetik için <span style="font-style:italic;">hangi</span> (tutarlı) formel sistem kullanılırsa kullanılsın, doğru olduklarını görebildiğimiz fakat formalistin önerdiği yöntemle, doğruluk değeri doğru ile tanımlanamayan bildirimler vardır. Katı bir formalistin böyle bir değere yaklaşmaya çalışması durumunda izleyeceği en iyi yol belki de, doğruluk kavramından hiç bahsetmemek, yalnızca belirli bir formel sistem çerçevesinde <span style="font-style:italic;">kanıtlanabilirlikten</span> söz etmektir. Ancak, böyle bir yöntem çok sınırlayıcı görünüyor. Böyle bir yöntemle Gödel teoreminin ana hatlarını bile çizemezsiniz, çünkü bu teoremin ana kısımları, gerçekte neyin doğru neyin yanlış olduğu hakkında yargıya varmak için uslamlama yönteminden yararlanır.<a href="../Text/notbolum4.xhtml#nb42" id="nb42d"><sup>[2]</sup></a> Bazı formalistler, aritmetik önermeleri olarak son derece karmaşık ve sıkıcı oldukları gerekçesiyle P<span style="font-style:italic;"><sub>k</sub></span>(<span style="font-style:italic;">k</span>) gibi bildirimlere aldırmadıklarını iddia ederek daha ‘pragmatik’ bir yaklaşımı benimserler. Bu gibi formalistin savı şöyledir:</p>

  <p><span style="font-style:italic;">‘Evet, P<sub>k</sub>(k) gibi acaip bir bildirim vardır ama onunla ilgili kanıtlanabilirlik veya doğruluk görüşüm sizin içgüdüsel görüşünüzle bağdaşmaz; bu gibi bildirimlere ciddi matematikte rastlanmaz (en azından benim ilgilendiğim matematikte rastlanmaz) çünkü bu gibi bildirimler tuhaf bir şekilde karmaşık ve matematik olarak yapaydır. ’</span></p>

  <p>Gerçekten de, matematik bildirimler olarak tam yazıldıklarında P<span style="font-style:italic;"><sub>k</sub></span>(<span style="font-style:italic;">k</span>) gibi önermeler son derece karmaşık ve tuhaf görünümlüdür. Ancak, son yıllarda, Gödel-tipi önermelere eşdeğer, oldukça basit ve benimsenebilir matematiksel özelliklere sahip bildirimler ileri sürülmüştür.<a href="../Text/notbolum4.xhtml#nb43" id="nb43d"><sup>[3]</sup></a> Bunlar, aritmetiğin normal aksiyomlarıyla kanıtlanamazlar, fakat aksiyom sisteminin bizzat sahip olduğu “açıkça doğru olma” özelliğinin sonucudurlar.</p>

  <p>Formalistin, ‘matematiksel doğruya' profesyonelce ilgi duymaması, matematiğin felsefesi açısından bana çok garip geliyor.</p>

  <p>Üstelik bu tutum, o kadar da pragmatik değil. Matematikçiler kendi usavarım yöntemlerini kullanırken savlarının, karmaşık bir formel sistemin aksiyomları ve yöntem kurallarıyla formüle edilip edilemiyeceğini sürekli kontrol etmek durumunda kalmak istemezler. Sadece savlarının, doğruyu saptamak için geçerli bir araç olup olmadığından emin olmak isterler. Gödel savı böyle bir geçerli araçtır ve bu nedenle bana öyle geliyor ki P<span style="font-style:italic;"><sub>k</sub></span>(<span style="font-style:italic;">k</span>)<span style="font-style:italic;">,</span> önceden belirlenebilen aksiyomların ve yöntem kurallarının uygulanmasıyla, yani daha alışılmış bir yöntemle, elde edilebilen bir matematiksel doğru kadar iyi bir matematiksel doğrudur.</p>

  <p>Bu arada bir yöntem kendiliğinden ortaya çıkıyor: Diyelim <span style="font-style:italic;">P<sub>k</sub>(k)</span> -burada şimdilik G<sub>0</sub> ile göstereceğim- gerçekten mükemmel geçerliliği olan bir önermedir; bu nedenle, onu ek bir aksiyom olarak sistemimize ekleyebiliriz. Kuşkusuz, bu şekilde değiştirilen yeni sistemimizin <span style="font-style:italic;">kendine ait</span> Gödel önermesi, örneğin G<sub>1</sub> olacaktır ve bu önerme de yine sayılarla ilgili mükemmelen geçerli bir bildirimdir. G<sub>1</sub> önermesini de aynı şekilde sistemimize katalım. Bu durumda, kendine ait G<sub>2</sub> Gödel önermesine sahip (yine mükemmelen geçerli) değiştirilmiş bir sistemimiz daha olacaktır; bunu da sisteme ekleyerek G<sub>3</sub> Gödel önermesini elde edelim ve aynı işlemi sonsuz kere tekrarlayalım. Elde edeceğimiz G<sub>0</sub>, G<sub>1</sub>, G<sub>2</sub>, G<sub>3</sub>.....ek aksiyomlarından oluşan listenin <span style="font-style:italic;">tümünü</span> uygularsak ne olur? Şimdi elimizde sınırsız (sonsuz) bir aksiyomlar sistemi bulunduğuna göre, Gödel yönteminin uygulanabilir olduğu artık pek de açık değildir. Ancak, Gödel önermelerinin bu şekilde süre<span style="">kli</span> birleştirilmesi mükemmel bir sistematik süreç olup, aksiyomlardan ve yöntemin kurallarından oluşan normal bir sonlu mantık sistemi şeklinde yeniden ifade edilebilir. Bu sistemin de ken<span style="">din</span>e ait Gödel önermesi, diyelim <span style="font-style:italic;">G<sub>w</sub>,</span> varolacağı ve bu önerme de sisteme eklenebileceği için Gödel önermesi G<sub>w</sub> <span style="font-style:italic;"><sub>+1</sub></span> olarak ifade edilebilir. Bunu tekrarlarsak G<sub>w</sub>, G<sub>w + i;</sub> G<sub>w+2</sub> G<sub>w + 3</sub>, ... gibi bir önermeler listesi elde ederiz. Bu önermelerin hepsi, doğal sayılarla ilgili olarak mükemmel tanımlanmış bildirimlerdir ve hepsi de formel sistemimize eklenebilir. Bu da yine mükemmel bir sistematik süreç olup bütün bildirimleri kapsayacak kadar geniş kapsamlıdır; fakat, kendine ait Gödel önermesine, G<sub>w + w</sub>, veya G<sub>w2</sub> önermesine, sahip olacağı için, bizi G<sub>w3</sub> Önermesine götürecek işlemi başlatarak G<sub>w2</sub>, G<sub>w2+1;</sub> G<sub>w2+ 2</sub>,... vb. oluşan yeni bir sonsuz fakat sistematik aksiyomlar listesi üretebiliriz. Aynı işlemi yineliyerek G<sub>w4</sub> ve sonra G<sub>w5</sub>, vb. önermeler üretmemiz olasıdır. Şimdi <span style="font-style:italic;">bu</span> yöntem tümüyle sistematiktir ve kendine ait G<sub>w2</sub> Gödel önermesine sahiptir.</p>

  <p>Bunun sonu var mı? Bir bakıma, hayır; fakat bizi, burada ayrıntılara girmeyeceğimiz kadar zor matematiksel görüşlere yönlendiriyor. Söz konusu yöntem, Alan Turing tarafından 1939’da sunulan bir yazıda tartışılmıştı.<a href="../Text/notbolum4.xhtml#nb44" id="nb44d"><sup>[4]</sup></a> Aritmetikte herhangi bir doğru (fakat evrensel olarak nicelleştirilmiş) önermenin, buna benzer şekilde, yinelemeye dayalı ‘Gödelleştirme’ süreciyle elde edilebilmesi ilginçtir! (Bkz. Feferman <span style="font-weight:bold;">1988).</span> Ancak, süreç, bir önermenin doğru veya yanlış olduğuna nasıl <span style="font-style:italic;">karar vereceğiz</span> sorusunu da ön plana çıkıyor. Kritik konu, her aşamada, Gödel önermelerinin oluşturduğu sonsuz ailenin ek bir aksiyom (veya sınırlı sayıda aksiyomlar) üretecek şekilde nasıl kodlanması gerektiğini yanıtlamaktır. Bu amaçla sonsuz ailemizin, herhangi bir algoritmik yöntemle sistematik hale getirilmesi gerekir. Söz konusu sistemleştirmenin, kendinden bekleneni, doğru olarak gerçekleştirmesini sağlamak için, daha önce P<span style="font-style:italic;"><sub>k</sub>(k)'in</span> doğru bir önerme olduğunu kanıtlarken yaptığımız gibi, sistemin dışında bir kaynaktan, sezgilerden yararlanacağız. Ancak, sezgiler sistemleştirilemez ve bu nedenle, gerçekten, <span style="font-style:italic;">herhangi bir</span> algoritmik işlemin dışında kalmaktadırlar!</p>

  <p>P<span style="font-style:italic;"><sub>k</sub>(k)</span> Gödel önermesinin, aritmetikte gerçekten doğru bir bildirim olduğunu kanıtlamaya yardımcı olan sezgi yeteneğimiz, mantıkçıların <span style="font-style:italic;">düşünce ilkesi</span> adını verdikleri genel yöntemin bir örneğidir; böylece mantıkçı aksiyom sisteminin ve yöntemin kurallarının anlamı üzerinde ‘düşünceye dalarak’ ve kendini, bu sistem ve yöntemlerin matematiksel doğruya ulaşmak için gerçekten geçerli araçlar olduklarına inandırarak, aksiyomlarla ve kurallarla ulaşılamayacak doğru bildirimleri söz konusu sezgiyle kodlayabilir. Yukarıda ana hatlarıyla açıklandığı gibi, P<span style="font-style:italic;"><sub>k</sub>(k)</span> önermesinin doğruluğuna bu ilkeyle ulaşılmıştır. İlk Gödel savı ile ilgili bir başka düşünce ilkesi (yukarıda açıklanmamış olsa da), matematiksel doğrulara ulaşmak için geçerli bir araç olarak kabul ettiğimiz bir aksiyom sisteminin aslında <span style="font-style:italic;">tutarlı</span> olduğu olgusundan yeni matematiksel doğrular üretilmesi esasına dayanır. Sezginin ilkeleri, çoğu kez, sonsuz kümelerle ilgili uslamlamayı içerirler ve bu nedenle, Russell'ınkine benzer paradokslara sürükleyebilecek türde bir sava çok fazla yaklaşmaktan sakınmak için bunları uygularken daima dikkatli olunmalıdır. Söz konusu ilkeler formalist uslamlama yönteminin tam anti-tezini oluşturur. Dikkatli davranıldığında, daha önce varlıklarının farkında olunmayan yeni matematiksel sezgilere ulaşmak amacıyla, herhangi bir formel sistemin katı sınırlarının dışına sıçramak mümkündür. Matematik literatüründe bunun güzel örneklerine rastlanabilir. Matematikçileri, doğru ile ilgili yargılarına yönlendiren ussal işlemler yalnız formel sistemlerin yöntemlerine dayalı değildir. Gödel önermesi P<span style="font-style:italic;"><sub>k</sub>(k)</span>’nin doğruluğunu anlamamız aksiyomlar aracılığıyla olmamıştır. Bir düşünce ilkesinde ‘anlama', yalnız algoritmik işlemlerle başarılamayacak bir matematik işlemini gerektirir. Böyle bir matematik işleminin, matematiksel bir formel sistem çerçevesinde nasıl kodlanabileceği konusu X. Bölüm’de incelenecektir.</p>

  <p>P<span style="font-style:italic;"><sub>k</sub>(k)</span> önermesinin ‘kanıtlanamazlığını’ fakat aynı zamanda doğruluğunu kanıtlayan tez ile Russell’ın ikilemi ile ilgili tez arasında belli bir benzerliğin varlığı okurun dikkatini çekmiş olabilir. Durma problemini çözecek bir makinenin varolmadığını savunan Turing teziyle de aralarında benzerlik vardır. Bu benzerlikler rastlantısal değildir. Üçü arasında güçlü tarihsel bağlar mevcuttur. Turing, savını Gödel’in eserinden esinlenerek bulmuştur. Gödel, Russell’ın ikilemini pekâlâ biliyordu ve mantığı aşırı zorlayan bu tür ikilemli uslamlamayı doğru bir matematik teoremi haline getirebildi (Tüm bu savlar, bir önceki bölümde değinilen Cantor’un “köşegen çizik” kavramından kaynaklanmaktadır).</p>

  <p>Bizi Russell’ın ikilemine götüren uslamlamayı red ederken niçin Gödel’in ve Turing’in savlarını kabul edelim? Russell’ın ikilemi ‘muazzam büyük’ kümeleri içeren daha belirsiz uslamlamaya dayanırken Gödel ve Turing’in savları çok daha kesin tanımlanmış olağan matematiksel teoremlerdir. Ancak, aralarındaki farkın istenildiği kadar kesin çizgilerle belirlenmemiş olduğunu kabul etmek zorundayız. Kesin çizgilerle ayırım yapılması, formalizmin amacı olmuştur. Gödel, katı formalist görüşün tutarlı olmadığını göstermiş, fakat tamamen güvenilir bir alternatif görüş de ileri sürmemiştir. Bence konu henüz çözümlenmiş değildir. Russell’ın ikilemine götüren ‘muazzam büyük' kümelere dayalı uslamlama gibi yöntemlerden kaçınmak için çağdaş matematiğin benimsediği yöntem her yönüyle tatmin edici değildir.<a href="../Text/notbolum4.xhtml#nba4V" id="nba4Vd"><sup>[V]</sup></a> Ayrıca, bunları formalistik terimlerle -veya, bir başka deyişle, çelişkilerle karşılaşılmayacağı konusunda tam güvence vermeyen terimlerle- ifade etmek eğilimi hâlâ ağır basmaktadır.</p>

  <p>Ne olursa olsun, bana öyle geliyor ki, Gödel’in teoreminin açıkça sergilediği sonuç, matematiksel doğruluğun herhangi bir formalist çerçeve içerisine sıkıştırılamıyacağıdır. Matematiksel doğruluk, salt formalizmin çok ötesinde bir şeydir. Godel’in teoremi olmaksızın da bunu anlamak olasıdır. Çünkü, bir formel sistem inşa etmeğe kalkışsak hangi aksiyomları veya hangi kuralları seçeceğimize nasıl karar verebiliriz? Hangi kuralları seçeceğimiz konusunda bize yol gösteren her zaman ve mutlaka, sistemin simgelerinin anlamı verildiğinde, bunlardan içgüdüsel olarak ne anladığımız olmalıdır. Hangi formel sistemin, “kendini kanıtlar” olma ve “anlamlılık" bakımından içgüdüsel olarak kabul edilebilir, hangisinin kabul edilemez olduğuna nasıl karar verebiliriz? Kuşkusuz, kendi içinde-tutarlılık fikri burada yeterli olamaz. Bu bağlamda ‘sezilebilir’ olmayan ve yanlış oldukları veya anlamsız oldukları gerekçesiyle red edeceğimiz aksiyomları veya yöntemsel kuralları içeren birçok kendi içinde -tutarlı sisteme sahip olabiliriz. Yine de gereksinim duyacağımız kavramlar, Gödel teoremi olmaksızın dahi, ‘kendini-kanıtlayabilme’ ve ‘anlamlılık’ kavramlarıdır.</p>

  <p>Ancak, Gödel teoremi olmaksızın, sadece önce formel sistemi inşa etmek, sonra bunun doğruluğu saptamak için kullanılan matematiksel önermenin bir parçası olarak ondan kurtulmak amacıyla ‘kendini-kanıtlama’ ve ‘anlamlılık’ kavramlarını ilk ve son kez kullanabileceğimizi düşlemek mümkün olabilirdi. Daha sonra, formalist düşünceye göre, söz konusu ‘bulanık’ içgüdüsel kavramlar, uygun formel matematikçinin ön düşünce sisteminin bir parçası olarak rol alabilecek, fakat matematiksel doğruluğun fiilen sergilenmesinde hiçbir rol üstlenemiyecekti. Gödel teoremi bu görüşün, matematiğin temel felsefesinde yerinin olmadığım göstermektedir. Matematiksel doğruluk fikri, formalizm kavramının sınırlarının çok ötesine uzanır. Matematiksel doğruluk kavramında, mutlak ve ‘Tanrı-vergisi’ olan bir şey vardır. Son bölümün sonunda tartışıldığı gibi, matematiksel Platonizmin ilgi alanı budur. Herhangi bir formel sistemde bu kavram, geçici ve ‘insan-yapısı’ bir nitelik taşır. Formel sistemler, matematik üzerine tartışmalarda gerçekten çok değerli roller üstlenirlerse de, doğruluğun saptanması yönünde sadece <span style="">kısmi</span> (veya yaklaşık) bir rehber olabilirler. Gerçek matematiksel doğruluk salt insan yapısının ötesine geçer.</p>

  <h2 id="uc6452c82-baf5-4922-9210-d048ebc15956">Platonizm mi Yoksa Sezgicilik mi?</h2>

  <p>Bu aşamaya kadar, matematik felsefesinin iki zıt ekolü ile ilgili görüşlerimi, formalist ekolden çok Platonist ekole ağırlık koyarak, ortaya koydum. Bunu yaparken ayır<span style="">ımımı</span> oldukça basitleştirilmiş tuttum. Oysa, değinilmesi gereken birçok ince ayrıntılar var. Örneğin, ‘Platonizm’ başlığı altında, matematiksel düşünce nesneler<span style="">inin</span> herhangi bir türde gerçek ‘Varlığa’ sahip olup olmadıkları veya sadece matematiksel ‘doğruluk’ kavr<span style="">amının</span> mutlak olup olmadığı tartışılabilir. Bu gibi ayı<span style="">rımlar</span>ı, konumuz çerçevesinde ele almamayı uygun gördüm. Kannımca, matematiksel doğruluğun mutlaklığı ile matematik kavramla<span style="">rının</span> Platonik varoluşu temelde aynı şeydir. Örneğin Mandelbrot kümesiyle ilişkilendirilebilecek ‘Varoluş’ kavramı, ‘mutlak’ doğasının bir Özelliğidir. Argand düzleminin bir noktas<span style="">ının</span> Mandelbrot kümesine ait olup olmadığı, hangi matematikçi veya bilgisayar tarafından incelenirse incelensin, mutlak bir sorudur. Mandelbrot kümesinin ‘matematikçiden bağımsız olma’ özelliği ona Platonik bir varlık kazandırır. Ayrıca, Mandelbrot kümesinin ince ayrıntıları, bilgisayar kullanarak ulaşabileceğimiz sınırın çok ötesindedir. Bu aygıtlar, 'bilgisayardan bağımsız’, çok daha derin ve kendine özgü bir yapıyla ilgili olarak ancak yaklaşık değerler verebilirler. Ancak, bu konuda kabul edilebilir ayırım yapabilmemizi sağlayan birçok yaklaşım bulunmasını takdir ediyorum. Burada, bu ayırımların üzerinde fazlaca durmamız gerekmiyor.</p>

  <p>Gerçek bir Platonist olduğunu, iddia eden bir kimse, Platonizmini taşıyabileceği noktada görüş ayrılıklarıyla karşılaşmayı göze almalıdır. Bizzat Gödel koyu bir Platonist idi. Şu ana kadar ele aldığım matematik bildirimleri, ötekilerinin yanında ‘ılımlı’ kalan türden bildirimlerdir.<a href="../Text/notbolum4.xhtml#nb45" id="nb45d"><sup>[5]</sup></a> Özellikle kümeler teorisinde tartışmaya açık daha çok bildirim ortaya çıkabilir. Küme teorisinin bütün dalları incelendiğinde öylesine aşırı büyüklükte ve öylesine belirsiz inşa edilmiş kümelerle karşılaşılabilir ki, benim gibi oldukça kararlı bir Platonist bile, bunların varolmalarının, veya olmamalarının, gerçekten bir ‘mutlak’ konu oluşturduğu hakkında kuşku duymaya başlayabilir.<a href="../Text/notbolum4.xhtml#nb46" id="nb46d"><sup>[6]</sup></a> Bir aşamada kümeler, öylesine karmaşıklaşır ve kavramsal yönden kuşku uyandırıcı tanımlamalara dönüşebilirler ki, bunlarla ilgili matematik bildirimlerin doğruluğu veya yanlışlığı sorusu, Tanrı-vergisi niteliğinden çok bir ‘görüş meselesi’ niteliğini alır. Bir insanın, Gödel ile birlikte, Platon izinin uzun yolunu katetmeğe ve böylesine aşırı boyutlardaki kümelerle ilgili matematik bildirimlerinin doğruluğunun veya yanlışlığının daima bir mutlak veya ‘Platonik’ konu olup olmadığını araştırmaya hazır olması, veya bir noktada bundan vazgeçip sadece kümeler oldukça yapıcı ve normal boyutta olduğu zaman mutlak doğruluk veya yanlışlığı araştırması, tartışmamızın dışındadır. Bizim için, biraz önce değindiğim standartlara göre, önem taşıyan kümeler (sonlu veya sonsuz) komik denecek kadar küçük boyutludur! Bu nedenle, çeşitli Platonistik görüşler arasındaki ayrım bizi fazlasıyla ilgilendirmeyecek.</p>

  <p>Ancak, <span style="font-style:italic;">sezgicilik</span> (ya da <span style="font-style:italic;">sonluculuk</span>) gibi başka matematik felsefeleri de vardır ki, bunlar zıt uçta yer alarak hangi sonsuz küme olursa olsun, bunların tamamlanmış varlığını kabul etmeyi red eder.<a href="../Text/notbolum4.xhtml#nba4VI" id="nba4VId"><sup>[VI]</sup></a> Sezgicilik, 1924’te, Hollandalı matematikçi L.E.J. Brouwer tarafından, matematiksel uslamlama yönteminde sonsuz kümeler son derece serbest kullanıldığında karşılaşılabilecek (Russell’ın ikilemi gibi) ikilemlere alternatif bir yanıt -formalizminkinden farklı- olarak ileri sürülmüştür. Bu görüşün kökleri, Platon’un öğrencisi olan fakat Platon’un matematiksel nesnelerin mutlak varlığı ve sonsuz kümelerin kabul edilebilirliği hakkındaki görüşlerini red eden Aristoteles’e kadar uzanır. Söz konusu görüşe göre kümeler (sonsuz veya değil), özlerinde bir ‘varlığa’ sahip değillerdir; sadece, sistem kapsamında elemanlarını tayin eden kurallar sayesinde ele alınabilirler.</p>

  <p>Brouwer’in sezgiciliğinin karakteristik bir özelliği, ‘üçüncünün olmazlığı yasası’nı kabul etmemesidir. Bu yasa, bir bildirimin olumsuz şeklinin red e<span style="">dilm</span>esinin, bu bildirimin önermesi ile eşdeğerde olduğunu savunur. (Simgelerle ifade edildiğinde: ~ (~ P) &lt;=&gt; P.) Herhalde Aristoteles de, mantıksal yönden bu kadar ‘açık seçik’ ifade edilen bir önermenin red edilmesinden mutsuzluk duyardı! Basit ‘sağ duyu’ terimleriyle açıklandığında söz konusu yasa, ‘kendini kanıtlayan doğruluk’ olarak yorumlanabilir: Bir şeyin doğru olmadığı yanlışsa, bu şey kuşkusuz doğrudur! (Bu yasa, <span style="font-style:italic;">reductio ad absurdum</span> yönteminin temelini oluşturur.) Fakat, sezgiciler, bu yasayı yadsıyabileceklerinin farkına vardılar. Çünkü temelde ‘varoluş’ kavramına farklı bir yaklaşım getiriyorlar ve bir matematiksel nesnenin gerçekten <span style="font-style:italic;">varolduğunu</span> kabul etmeden önce onun kesin bir (ussal) yapısının sunulmasını gerekli görüyorlardı. Buna göre sezgici için ‘varoluş’, ‘yapıcı varoluş’ anlamındadır. <span style="font-style:italic;">Reductio ad absurdum</span> yöntemine uygun bir önermede bir varsayım ileriye sürülürken, sonuçlarının bir çelişkiye götürebileceği, bu çelişkinin söz konusu varsayımın y<span style="">anlış</span> olduğuna dair istenilen kanıtı sağlayacağı imâ edilir. Varsayım, belirli bazı özelliklere sahip matematiksel bir nesnenin varolmadığını öneren bir bildirime dönüşebilir. Bu durumda bir çelişki görülürse, basit matematikte çıkarılacak anlam, öngörülen varlığın gerçekten varolduğudur. Fakat böyle bir sav, kendi başına, böyle bir varlığı inşa edecek bir yöntem sağlayamaz. Bir sezgiciye göre bu çeşit bir varoluş, hiçbir zaman varoluş olamaz; ve işte bu bağlamda, üçüncünün olmazlığı yasasını ve reductio ad absürdüm yöntemini kabullenmeyi red eder. Gerçekten de Brouwer bu çeşit bir yapıcı-olmayan Varoluş’tan hiç hoşlanmamıştır.<a href="../Text/notbolum4.xhtml#nb47" id="nb47d"><sup>[7]</sup></a> Gerçek bir yapılandırma olmaksızın böyle bir kavram anlamsızdır diyerek tezini savunmuştur. Brouwer mantığında, bir nesnenin varolmayışının yanlışlığından bu nesnenin gerçekten varolduğu anlamı çıkarılamaz!</p>

  <p>Kanımca, matematiksel varoluşta yapıcılık aramanın takdir edilecek bir yanı olmakla birlikte Brouwer’in sezgicilik görüşü biraz fazla aşırıdır. Brouwer fikirlerini ilk kez 1924’de, yani Church ve Turing’in eserlerinden on yıldan fazla bir süre önce, açıklamıştır. Şimdi artık, yapıcılık kavramı -Turing’in hesaplanabilirlik fikri bağlamında-, matematiksel felsefenin <span style="font-style:italic;">alışıldık</span> çerçevesinde incelenebildiğine göre, Brouwer’in bizi yönlendirmek istediği aşırılıklara gitmemiz gerekmiyor. Yapıcılığı, matematiksel varoluş konusundan ayrı bir konu olarak ele alabiliriz. Sezgiciliğin izinde gidersek, matematiğin kapsadığı çok güçlü önermeleri kullanmaktan kendimizi alıkoymamız gerekir ki konu böylece tıkanacak ve kısırlaşacaklar.</p>

  <p>Sezgici görüşün insanı içine sürükleyebileceği çeşitli zorlukları ve görünüşteki tuhaflıkları ayrıntılarıyla anlatmak istemiyorum; fakat, karşılaşılabilecek sorunlardan bir kaçına değinmek yararlı olabilir. Brouwer’in sıkça verdiği bir örnek, π‘nin ondalık açılımıyla ilgilidir:</p>

  <p>3.141592653589793...</p>

  <p>Bu ondalık açılımın herhangi bir yerinde yirmi adet birbirini izleyen yedi rakamı</p>

  <p>π= 3.141592653589793... 77777777777777777777...;</p>

  <p>var mı yoksa yok mu? Basit matematiksel ifadeyle, şu anda bütün söyleyebileceğimiz ya ‘var’ ya da 'yok’ demektir -ancak bunlardan hangisinin yanıt olduğunu bilmiyoruz! Bu, yeterince zararsız bir bildirim gibi görünebilir. Ancak, sezgiciler, π'nin ondalık açılımının bir yerinde birbirini izleyen yirmi adet yedi rakamı vardır, aksi halde yoktur’ ifadesinin geçerliliğini- böyle bir açılımın bulunduğu veya bulunmadığı (kendilerince kabul edilebilir yapıcı bir tarzda) saptanmadıkça veya saptanıncaya kadar -inkâr edeceklerdir! π'nin ondalık açılımının bir yerinde birbirini izleyen yirmi adet yedinin dizilimini göstermek için doğrudan hesaplama yeterli olacakken, böyle bir dizilimin gerçekte bulunmadığını göstermek için bir matematik teoremine ihtiyaç vardır. Hiçbir bilgisayar, bugüne değin, π’nin hesabında, böyle bir dizilimin varolduğunu saptayacak kadar gelişmemiştir. Böyle bir dizilimin varlığını olasılık çerçevesinde ümit edebiliriz ama bir bilgisayarın diyelim saniyede 10<sup>10</sup> işlem hızında basamak ürettiğini varsaysak bile, açılımı bulmak için yüz ilâ bin yıl arasında bir süre gerekebilir! Bence, böyle bir açılımın varlığının, doğrudan hesaplanmaktan çok, bir gün, matematiksel işlemle saptanması olasılığı daha fazla görünüyor (bu belki çok daha güçlü ve ilginç bir teoremin yan sonucu olur) -ama sezgiciler tarafından onaylanmayacak bir tarzda saptanacaktır!</p>

  <p>Bu özel sorun matematiğin gerçek ilgi alanına girmez. Açıklaması kolay olduğu için yalnızca bir örnek olarak verilmiştir. Brouwer, kendi aşırı sezgiciliğinin çerçevesinde, π’nin ondalık açılımının bir yerinde peş peşe gelen yirmi adet yedinin varlığının şu an için ne doğru ne de yanlış olduğunu savunacaktır. Gelecekte bir gün bu veya şu şekilde doğru yanıt, hesapla veya (sezgisel) matematiksel kanıtla, bulunduğu takdirde önerme, duruma göre ‘doğru’ veya ‘yanlış’ olacaktır. Buna benzer bir diğer örnek ‘Fermat’ın son teoremidir. Brouwer’in aşırı sezgici görüşüne göre, şimdilik, bu teorem de ne doğru ne yanlıştır, fakat gelecekte bir tarihte doğru da olabilir yanlış da.<a href="../Text/notbolum4.xhtml#nba4VII" id="nba4VIId"><sup>[VII]</sup></a> Bence, matematiksel doğruluğun bu çeşit öznelliği ve zamana-bağımlılığı hiç hoşlanılmayacak bir niteliktir. Bir matematik sonucunun resmen kanıtlanıp kanıtlanmadığı veya ne zaman kanıtlandığı gerçekten öznel bir konudur. Matematiksel doğruluk bu çeşit topluma bağlı kriterlere dayandırılmamalıdır. Zamana göre değişen bir matematiksel doğruluk kavramına sahip olmak, fiziksel dünyayı tanımlamak için insanın güvenle kullanabileceğini umduğu matematik yönünden, en iyimser bir ifadeyle, beceriksizlik ve olumsuzluktur. Sezgicilik tezini savunanların hepsi, Brouwer kadar aşırı bir tutum takınmayacaktır. Ama nasıl olursa olsun, yapılandırmacılığın amaçlarına sempati duyanlar için bile sezgici bakış açısı, açıkça görüldüğü gibi pek bir hantaldır. Sadece uygulanabilecek matematiksel uslamlama yönünden çok sınırlayıcı olması gibi tek olumsuz özelliği nedeni için bile günümüzün matematikçilerinden pek azı, sezgiciliği ciddiye alabilir.</p>

  <p>Günümüz matematik felsefesinin üç ana akımını kısaca tanımladım: Formalizm, Platonizm ve Sezgicilik. Matematiksel doğruluğun mutlak, dışsal ve ebedi olduğunu ve insan-yapısı kriterlere dayanmadığını, matematik nesnelerinin kendilerine özgü ve zamanla sınırlı olmayan bir varlığa sahip olduklarını, ne insan toplumuna ne -de belirli fiziksel nesnelere bağlı olmadığını savunan Platonik görüşe yakınlık duyduğumu gizlemiyorum. Platonizm ile ilgili görüşlerimi bu kısımda, bir önceki kısımda ve III. Bölüm'ün sonunda açıkladım. Umarım okuyucum bu konuda benimle beraber yola çıkmaya hazırdır. Yol üzerinde karşılaşacaklarımız için bu önemlidir.</p>

  <h2 id="ud50100aa-0673-4957-9f0f-35809e7f1893">Turing’in Sonucundan Çıkan Gödel-Tipi Teoremler</h2>

  <p>Gödel teoremini sunarken birçok ayrıntıya, bu arada tarihsel olarak belki de en önemlisine, aksiyomların tutarlılığının ‘karar verilemez’ olduğuna ilişkin sava, değinmedim. Amacım, Hilbert ve çağdaşları için büyük önem taşıyan ‘aksiyomun tutarlılığının -kanıtlanabilirliği’ problemini vurgulamak değil, fakat Gödel’in belli bir önermesini, ele aldığımız biçimsel sistemin aksiyomlarını ve kurallarını kullanarak ne kanıtlanabilir ne de çürütülemez olduğunu gösteremeyeceğimizi, ancak işlemlerin anlamlarına ‘sezgiyle’ ulaşırsak, <span style="font-style:italic;">doğru</span> bir önerme olduğunu açıkça <span style="font-style:italic;">anlayacağımızı</span> vurgulamaktır!</p>

  <p>Turing’in, Gödel’in yapıtını inceledikten sonra, kendi teoremini, durma probleminin çözülemezliğine dair teoremini, geliştirmiş olduğunu söylemiştim. Her iki teoremin birçok ortak noktası bulunmaktadır ve gerçekten de, Gödel’in sonucuna Turing’in yöntemiyle ulaşılabilir. Bunun nasıl gerçekleşeceğini inceleyelim ve bu arada Gödel teoreminin altında neler yattığı hakkında oldukça farklı bir bakış açısı edinelim.</p>

  <p>Biçimsel matematiksel sistemin başlıca özelliği, verilen bir matematiksel Önerme ile ilgili simgeler dizisinin, sistem çerçevesinde, bir kanıt oluşturup oluşturmadığına karar vermek işleminin hesaplanabilir olmasını gerektirmesidir. Matematiksel kanıt düşüncesinin biçimleştirilmesinde yegane amaç, ne de olsa, geçerli bir uslamlama yöntemi için karar almak zorunda kalmamaktır. Önerilen bir kanıtın gerçekten bir kanıt olup olmadığını, tümüyle, mekanik ve önceden belirlenmiş bir yöntemle kontrol etmek mümkün olmalıdır; başka bir deyişle, kanıtları kontrol eden bir algoritma bulunmalıdır. Öte yandan, önerilen matematiksel bildirimlerin kanıtlarını (veya karşıt- kanıtlarını) <span style="font-style:italic;">bulmak,</span> mutlaka algoritmanın görevidir demiyoruz.</p>

  <p>Gerçekte, herhangi bir biçimsel sistemde ne zaman bir kanıt varsa, kanıtı bulmak için bir algoritma da daima vardır. Çünkü, sistemimizin, sınırlı bir simgeler ‘alfabesiyle’ ifâde edilebilen dilde formüle edildiğini varsaymalıyız. Daha önce yaptığımız gibi, simge dizilerini, her bir dizi uzunluklarına göre alfabetik sıralanmak şartıyla leksikografik olarak sıralıyalım. Böylece, doğru inşa edilen tüm kanıtların, leksikografik plâna uygun numaralanarak sıralanmasını sağlamış oluruz. Kanıtlar listemize sahip olmakla, formel sistemin tüm <span style="font-style:italic;">teoremlerine</span> de sahip oluruz. Çünkü teoremler, doğru şekilde inşa edilmiş kanıtların son sıralarında yer alan önermelerdir. Sistemin <span style="font-style:italic;">tüm</span> simgelerinden oluşan dizilerinin leksikografik listesini, bu diziler kanıt olarak anlam taşısın veya taşımasın, dikkate alabilir ve sonra, ilk diziyi, kanıt olup olmadığını denemek için kanıt-sınama algoritmamızla test ederiz ve kanıt değilse listeden atarız; sonra ikinci diziyi aynı şekilde test eder ve kanıt olmadığım anlarsak onu da listeden çıkarırız; sonra üçüncüsünü, dördüncüsünü vb. aynı şekilde test ederiz. Bu şekilde, bir kanıt varsa onu, sonuçta, listenin bir yerinde buluruz.</p>

  <p>Hilbert, matematik sistemine, sistem kapsamında doğru formüle edilmiş herhangi bir matematik önermesinin doğruluğuna veya yanlışlığına formel bir kanıtla karar vermemizi sağlayacak kadar güçlü bir aksiyomlar ve kurallar sistemi bulmayı başarsaydı, bu gibi önermelerin doğruluğuna karar verilmesini sağlayacak genel bir algoritmik yönteme sahip olacaktık. Bu niçin böyle? Çünkü, yukarıda genel hatlarıyla çizilen yöntemle aradığımız önermeye listenin son satırında rastgelirsek, önermeyi <span style="font-style:italic;">ispatladık</span> demektir. Ama bunun yerine, önermemizin <span style="font-style:italic;">olumsuz</span> şekliyle karşılaşırsak, önermemizi <span style="font-style:italic;">çürütmüş</span> oluruz. Hilbert'in programı eksiksiz olsaydı, bu sonuçlardan birine veya diğerine sonuçta mutlaka ulaşırdık (ve, tutarlı olması durumunda iki sonuç birlikte asla meydana gelmezdi). Böylece, mekanik yöntemimiz herhangi bir aşamada daima son bulacak ve biz de sistemin tüm önermelerinin doğruluğu veya yanlışlığı hakkında yargıya varmamızı sağlayan evrensel bir algoritmaya sahip olacaktık. Bu durumda, matematik önermeler hakkında genel bir algoritma bulunmadığına dair Turing’in vardığı sonucun aksi kanıtlanmış olacaktı. (Bkz. Bölüm II) Sonuç olarak Gödel’in, Hilbert-tipi hiçbir programın, tartışmakta olduğumuz bağlamda eksiksiz bir program olamayacağı şeklindeki görüşünü fiilen kanıtlamış olurduk.</p>

  <p>Aslında Gödel’in teoremi bundan daha özel bir amaçla inşa edilmiştir. Çünkü Gödel’in ilgilendiği biçimsel sistemden, genel matematik önermeler için değil yalnız aritmetik önermeler için yeterli olması beklenmekteydi. Turing makinelerinin gerekli tüm işlemlerinin aritmetikten yararlanarak uygulanması olası mıdır? Başka bir deyişle, doğal sayıların tüm <span style="font-style:italic;">hesaplanabilir</span> aksiyomları (yani, Turing makinesinin işlemlerinin sonucu tekrarlayan, veya algoritmik fonksiyonlar) basit aritmetik terimleriyle ifade edilebilir mi? Gerçekte bunu yapabiliriz ama tam olarak değil. Standart aritmetik ve mantık kurallarına (Ǝ ve ∀ dahil) göre bir işlem daha yapmalıyız. Bu işlem, sadece</p>

  <p><span style="font-style:italic;">'K(x</span>)’i doğrulayan en küçük doğal sayı x’i’</p>

  <p>seçer. Burada <span style="font-style:italic;">K(</span> ) aritmetik işlemlerle hesaplanan herhangi bir önergesel fonksiyon olup, karşılığında böyle bir sayının bulunduğu varsayılır; yani <span style="font-style:italic;">Ǝx[K(x)]</span> doğrudur (Böyle bir sayı bulunmasaydı işlemimiz, varolmayan ve bulunması istenen <span style="font-style:italic;">x</span> sayısını bulmak çabası içerisinde ‘sonsuza kadar süregiderdi’)<a href="../Text/notbolum4.xhtml#nba4VIII" id="nba4VIIId"><sup>[VIII]</sup></a>. Ne olursa olsun, Turing’in sonucuna dayalı yukarıdaki sav, Hilbert’in, biçimsel sistem çerçevesinde tüm matematik dallarını hesaplara indirgeyen programının savunulamayacağını gösteriyor.</p>

  <p>Yöntem, bu şekliyle, doğru fakat sistem içerisinde kanıtlanamayan bir Gödel önermesine <span style="font-style:italic;">(P<sub>k</sub>(k)</span> gibi) sahip olduğumuzu hemen göstermez. Ancak, II. Bölüm’deki ‘bir algoritmayı nasıl altedebiliriz’ tartışmasını hatırlarsanız, buna çok benzer bir şeyi burada yapabileceğimizi göreceksiniz. Hatırlayacağınız gibi, bir Turing makinesinin işleminin durup durmayacağına karar vermek için herhangi bir algoritma verildiğinde, çalışacağını bizim anlayacağımız fakat algoritmanın anlayamıyacağı bir Turing makinesi işlemini üretebiliriz (Algoritmanın, bir Turing makinesi işleminin ne zaman duracağı hakkında bize doğru bilgi vermesi gerektiği konusunda ısrar ettiğimizi, ama bazen algoritmanın kendisi sonsuza kadar işlediği için, Turing makinesinin ne zaman duracağını bize bildirmediğini anımsayınız). Bu nedenle, Gödel’in teoreminde olduğu gibi, verilen algoritmik işlemin başaramadığını gerçekleştiren bir önermeye sahip olarak, sezgiden yararlanarak, genelde neyin <span style="font-style:italic;">doğru</span> olduğunu (Turing makinesinin işleminin durmayacağını) görebiliriz.</p>

  <h2 id="udbd33ef5-efbc-45a8-8b48-a8a0a99f3b18">Tekrarlı Sayılabilir Kümeler</h2>

  <p>Turing’in ve Gödel’in. sonuçlarının temel öğelerini küme teorisi dilinde, grafik biçimde, tanımlamanın bir yolu vardır, Böylece esas konuların ön plana çıkabilmesi için, belirli simge sistemleriyle veya formel sistemlerle zorunlu tanımlamalar yapmaktan kurtulabiliriz. (4, 5, 8), {0, 57, 100 003}, {6}, {0}, {1, 2, 3, 4, 9999}, {0, 1, 2, 3, 4, ...}, {0, 2, 4, 6, 8, ...}, hatta tam küme N = {0, 1, 2, 3, 4, ...} veya boş küme ∅ = {} gibi küme gruplarını inceleyebilmek için yalnız 0, 1, 2, 3, 4, ..., gibi (sonlu veya sonsuz) <span style="font-style:italic;">doğal sayı</span> kümelerini inceleyeceğiz. Sadece hesaplanabilir sorularla, örneğin: ‘Hangi tür doğal sayı kümeleri algoritmalar tarafından üretilebilir, hangileri üretilemez?’ gibi sorularla ilgileneceğiz.</p>

  <p>Bunun gibi konuları ele almak için, istersek, her bir <span style="font-style:italic;">n</span> doğal sayısının belirli biçimsel bir sistemde belirli bir simgeler dizisini temsil ettiğini düşünebiliriz. Bu, sistemdeki önermelerin (‘söz dizimi’ doğru yapılmış) leksikografik sıralamasına göre simgelerin n’inci sırası, yani Q<sub>n</sub> olacaktır. Her doğal sayı bir önermeyi temsil eder. Formal sistemin tüm önermelerinin kümesi, kümesinin tümü tarafından temsil edilecek, ve örneğin, biçimsel sistemin teoremleri, doğal sayıların daha küçük bir alt kümesini, örneğin P kümesini, oluşturacaktır. Ancak, önermelerle ilgili herhangi bir belirli numaralama sisteminin detayları önemli değildir. Doğal sayılarla önermeler arasında bağlantı kurmak için ihtiyacımız olan tek şey, kendisini temsil eden <span style="font-style:italic;">n</span> doğal sayısından (uygun bir simgeler sisteminde yazılmış) Q<sub>n</sub> önermesini elde etmek için bilinen bir algoritma, ve Q<sub>n</sub>’den n’yi elde etmek için bir başka algoritmadır. Böyle iki algoritma verildiğinde, özel bir formel sistemin önermelerinin kümesiyle, doğal sayılar kümesi N’i özdeşleştirebiliriz.</p>

  <p>Tüm Turing makinelerinin tüm işlemlerini kapsayacak kadar geniş kapsamlı, tutarlı -ve aynı zamanda, aksiyomlarının ve yöntem kurallarının ‘doğru olduğunu kendiliğinden kanıtlar’- şeklinde nitelenebilecek kadar ‘duyarlı’ olduğu bir biçimsel sistem seçelim. Artık, biçimsel sistemin Q<sub>0</sub>, Q<sub>1</sub>,Q<sub>2</sub>, Q<sub>3</sub>,... gibi önermelerinden bazıları, sistem içerisinde gerçekten kanıtlara sahiptir. Bu ‘kanıtlanabilir’ önermelerin numaraları, N ’de bir altküme, bir P ‘teoremler’ kümesini oluşturacaklardır. Belirli bir biçimsel sistemde önermeleri kanıtlarıyla birlikte birbiri arkasına üreten bir algoritma bulunduğunu daha önce görmüştük (n’den algoritmik olarak '<span style="font-style:italic;">n</span>'inci kanıt’ П<sub>n</sub>’in elde edildiğini daha önce açıklamıştık. Bütün yapmamız gereken, sistem kapsamında kanıtlanabilir n’inci önermeyi, yani n’inci teoremi bulmak için n’inci kanıtın son dizesine bakmaktır). Öyleyse, P’nin elemanlarını peşpeşe üreten (tekrarlar bulunması fark etmez) bir algoritma var elimizde.</p>

  <p>Bir algoritma kullanılarak üretilebilen P gibi bir küme, <span style="font-style:italic;">tekrarlı sayılabilir küme</span> adıyla anılır. Sistem kapsamında kanıtlanamaz olan önermelerin, yani tersleri kanıtlanabilir önermelerin, (yolumuza devam ederken terslerini almak suretiyle kanıtlayarak sayabildiğimiz için aynı zamanda tekrarlı sayılabilir küme oluşturduklarını unutmayalım) tekrarlı sayılabilir birçok alt-kümesi vardır, ve bunları tanımlamak için formel sistemimize baş vurmak gerekmez. Tekrarlı sayılabilir kümelerin basit örnekleri, çift sayılar kümesi</p>

  <p>{<a id="bookmark13"></a>0, 2, 4, 6, 8, ...},</p>

  <p>kareler kümesi</p>

  <p>{0, 1, 2, 9, 16,...},</p>

  <p>ve asal sayılar kümesi</p>

  <p><span style="font-style:italic;">{2,</span> 3, 5, 7, 11, ...}’dir.</p>

  <p>Açıkça görüldüğü gibi bu kümelerden her birini bir algoritma vasıtasıyla üretebilmekteyiz. Yukarıda verilen üç örnekten her birinde kümenin tümleyeninin, yani küme içinde yer almayan doğal sayılar kümesinin de tekrarlı sayılabilir olduğu görülecektir. Söz konusu üç örnekte, tümleyen kümeler, sırasıyla, şöyledir:</p>

  <p>(1, 3, 5, 7, 9, ...};</p>

  <p>(2, 3, 5, 6, 7, 8, 10, ...}; ve</p>

  <p>{0, 1, 4, 6, 8, 9,10, 12, ...}.</p>

  <p>Bu tümleyen kümeler için de bir algoritma üretmek kolay olacaktır. Gerçekten de, herhangi bir <span style="font-style:italic;">n</span> doğal sayısının çift olup olmadığına, kare olup olmadığına veya asal sayı olup olmadığına algoritmik olarak karar verebiliriz. Böyle bir algoritmayı, hem asıl kümeyi hem de onu tümleyen kümeyi üretmek için kullanabiliriz. Hem kendisi hem de tümleyen kümesi tekrarlı sayılabilir bir kümeye <span style="font-style:italic;">yinelenen küme</span> denir. Elbette ki yinelenen bir kümenin tümleyeni de bir yinelenen kümedir.</p>

  <p>Peki, tekrarlı sayılabilir fakat yinelenemiyen kümeler var mıdır? Biraz duralım, bakalım bunun arkasından ne gelecek. Böyle bir kümenin elemanları bir algoritmayla üretilebileceğine göre, kümede yer aldığından kuşkulandığımız -ve, bir an için gerçekten kümede yer aldığını varsayalım- bir elemanın gerçekten kümenin elemanı olup olmadığına karar vermemizi sağlayacak bir araca sahip olacağız. Bize gerekli olan tek şey, algoritmamızın, incelemekte olduğumuz elemanı buluncaya kadar kümenin tüm elemanlarını taramasına izin vermektir. Fakat, varlığından kuşkulandığımız elemanın kümede gerçekten bulunmadığını varsayalım. Bu durumda algoritmamız işe yaramıyacaktır, çünkü bir karara varmaksızın taramasını sonsuza dek sürdürecektir. Bu nedenle, ‘tümleyen’ kümeyi üretmek için bir algoritmaya ihtiyacımız vardır. Her iki algoritmayla donanımlı olarak kendimizi yeterli hissetmemiz gerek. İki algoritmadan birini ya da diğerini kullanarak zanlıyı her durumda yakalayabiliriz. Ancak, bu mutluluk, yinelenen bir kümeyle ne yapacağımıza bağlıdır. Burada kümemizin yalnızca tekrarlı sayılabilir olduğu fakat yinelenen nitelikte olmadığı varsayılmıştır: Tümleyen kümeyi üretmek için önerdiğimiz algoritma ortada yoktur! Böylece tuhaf bir durumla karşı karşıyayız. Kümedeki bir elemanın gerçekten kümede olup olmadığına algoritma yardımıyla karar vereceğiz, ama gerçekten kümede olup olmadığını yine algoritmayla garanti edemiyoruz! Böyle bir durumla gerçekten karşılaşılabilir mi? Tekrarlı sayılabilir fakat yinelenemeyen kümeler gerçekten var mıdır? Peki, P kümesinden ne haber? Yinelenen bir küme midir? Tekrarlı sayılabilir olduğunu biliyoruz. Öyleyse tümleyen kümenin de tekrarlı sayılabilir olup olmadığına karar vermemiz gerekiyor. Aslında, P tekrarlı sayılabilir küme değildir! Bunu nasıl kanıtlayabiliriz? Pekâlâ, Turing makinesinin işlemlerinin, biçimsel sistemimizin işlemleri arasında yer aldığının varsayıldığını hatırlayınız, n’inci Turing makinemizi T<sub>n</sub> ile gösterdiğimize göre</p>

  <p><span style="font-style:italic;">‘T<sub>n</sub> (n)</span> durur’</p>

  <p>bildirimi bir önermedir. Biçimsel sistemimizde her bir <span style="font-style:italic;">n</span> doğal sayısı için bu önermeyi S<span style="font-style:italic;">(n)</span> ile gösterelim. <span style="font-style:italic;">S(n)</span> önermesi n<span style="font-style:italic;">’nin</span> bazı değerleri için doğru, bazı değerleri için yanlış olacaktır. Doğal sayılar 0, 1, 2, 3, ..., <span style="font-style:italic;">n</span> tarafından taranırken, tüm <span style="font-style:italic;">S(n)</span> kümesi, N’in alt-kümesi olan S ile temsil dilecektir. Şimdi, Turing’in temel sonucunu (II. Bölüm) hatırlayın: <span style="font-style:italic;">T<sub>n</sub>(n</span>)’in aslında durmadığı durumlarda <span style="font-style:italic;">‘T<sub>n</sub>(n)</span> durmaz’ önermesini doğrulayan bir algoritma yoktur. Bu sonuç, yanlış S(<span style="font-style:italic;">n</span>)'ler kümesinin tekrarlı sayılabilir olmadığını göstermektedir.</p>

  <p>S’in P’de yer alan kısmının, <span style="font-style:italic;">doğru S(n)</span>'lerden oluştuğunu görüyoruz. Bu neden böyle? Kuşkusuz herhangi bir <span style="font-style:italic;">S(n)</span> kanıtlanabilir ise, doğru olmalıdır (çünkü formel sistemimiz <span style="font-style:italic;">anlamlı</span> seçilmiştir!) Bu nedenle, S’in P kümesinde yer alan kısmı, sadece <span style="font-style:italic;">doğru S(n)</span> önermelerinden oluşmalıdır. Üstelik, P kümesinin kapsamı dışında hiçbir doğru <span style="font-style:italic;">S(n)</span> önermesi yer alamaz, çünkü <span style="font-style:italic;">T<sub>n</sub>(n</span>) durursa, gerçekten sistemin içerisinde yer alan bir kanıt elde edebiliriz.<a href="../Text/notbolum4.xhtml#nba4IX" id="nba4IXd"><sup>[IX]</sup></a></p>

  <p>Şimdi, diyelim ki, P kümesini tümleyen küme tekrarlı sayılabilmektedir. Bu durumda, bu tümleyen kümenin elemanlarını üretmek için bir algoritmaya ihtiyacımız olacaktır. Bu algoritmayı tarayarak rastladığımız her <span style="font-style:italic;">S(n)</span> önermesini kaydedebiliriz. Kaydedeceğimiz tüm <span style="font-style:italic;">S(n)</span> önermeleri yanlış önermeler olacağı için yöntemimiz aslında bize yanlış <span style="font-style:italic;">S(n)</span> önermeler kümesinin tekrarlı sayımını verecektir. Fakat, yanlış <span style="font-style:italic;">S(n)</span> önermelerinin tekrarlı sayılabilir olmadığını biraz önce belirtmiştik. Bu çelişkiye dayanarak, P’nin tümleyen kümesinin tekrarlı sayılabilir olmadığını söyleyebiliriz. Öyleyse, kanıtlamaya çalıştığımız gibi, <span style="font-style:italic;">P kümesi yinelenen bir küme değildir.</span></p>

  <p>Bu özellikler, gerçekte, biçimsel sistemimizin tam olmayacağını gösterir. Başka bir deyişle, sistemin içerisinde ne kanıtlanabilir ne de çürütülebilir önermeler yer almalıdır. Çünkü, bu gibi ‘karar verilemez’ önermeler bulunmazsa, <span style="font-style:italic;">P</span> kümesini tümleyen kümenin, <span style="font-style:italic;">çürütülemez</span> önermeler kümesi olması gerekirdi (kanıtlanamayan herhangi bir şey çürütülemez). Fakat çürütülemez önermelerin, tekrarlı sayılabilir küme oluşturduklarını görmüştük. Öyleyse bu durumda <span style="font-style:italic;">P kümesi yinelenen küme</span> olmalıdır. Ancak <span style="font-style:italic;">P, yinelenen bir küme değildir.</span> İşte bu çelişki biçimsel sistemin tamamlanamıyacağını gösterir, ve Gödel’in teoreminin ana savıdır.</p>

  <p>Peki, N’nin formel sistemimizin doğru önermelerini temsil eden alt-kümesi <span style="font-style:italic;">T</span> ne olacak? <span style="font-style:italic;">T</span> yinelenebilir bir küme midir? <span style="font-style:italic;">T</span> tekrarlı sayılabilir mi? T’yi tümleyen küme tekrarlı sayılabilir mi? Gerçekte, tüm bu soruların yanıtı ‘Hayır’dır. Bunu anlamanın bir yolu,</p>

  <p><span style="font-style:italic;">‘T<sub>n</sub>(n)</span> durur’</p>

  <p>bildiriminin yanlış önermelerinin bir algoritmayla üretilemiyeceğini, daha önce yaptığımız gibi, göstermektir. Bu nedenle, yanlış önermeler, <span style="font-style:italic;">bütün olarak</span> bir algoritma tarafından üretilemezler, çünkü böyle bir algoritma, tüm yanlış '<span style="font-style:italic;">T<sub>n</sub>(n)</span> durur’ önermelerini özellikle sayacaktır. Aynı şekilde, tüm doğru önermeler kümesi de bir algoritma tarafından üretilemez (çünkü böyle bir algoritmaya, ürettiği her bir önermenin tersini aldırtmak suretiyle, tüm yanlış önermeleri üretmesi basit bir şekilde sağlanabilir). Doğru önermeler tekrarlı sayılabilir olmadığına (yanlış önermeler de öyle) göre, sistemin kapsamında kanıtlanabilir önermelere kıyasla çok daha karmaşık ve derinlemesine bir yapı oluştururlar. Bu durum yine Gödel’in teoremine bir örnektir: Matematiksel <span style="font-style:italic;">doğruluk</span> kavramına, formel bir sav yoluyla ancak kısmen ulaşılabilir.</p>

  <p>Ancak, tekrarlı sayılabilir kümeler oluşturan bazı basit doğru aritmetik önerme sınıfları vardır. Örneğin,</p>

  <p>Ǝ <span style="font-style:italic;">w, x z [f(w, x,</span> ..., <span style="font-style:italic;">z) =</span> 0]</p>

  <p>gibi doğru önermelerin -burada <span style="font-style:italic;">f(),</span> toplama, çıkarma, çarpma ve karesini alma gibi basit aritmetik işlemlerden inşâ edilmiş herhangi bir fonksiyondur -tekrarlı sayılabilir küme oluşturduğunu (bu kümeye A diyorum) görmek zor değildir.<a href="../Text/notbolum4.xhtml#nb48" id="nb48d"><sup>[8]</sup></a> Bu çeşit bir önermenin örneği, doğru olup olmadığını bilmememize karşın, 'Fermat’ın son teoremi’nin olumsuz şeklidir. Önermenin <span style="font-style:italic;">F</span>( ) değeri, aşağıdaki işlemle saptanabilir:</p>

  <p><span style="font-style:italic;">f(w, x, y, z)</span> = <span style="font-style:italic;">(x +</span> 1)<sup>w+3</sup> + (y + 1)<sup>w+3</sup> <span style="font-style:italic;">- (z +</span> 1)<sup>w+3</sup></p>

  <p>Ancak, A kümesi hiç de beklendiği gibi yinelenen bir küme değildir (İlk haliyle Gödel teoreminin bir sonucu olmasına karşın görülmesi pek de kolay olmayan bir olgudur), Böylece, ‘Fermat’ın son teoremi'nin doğru veya yanlış olduğuna, ilke olarak bile, karar vermemizi sağlayacak bir algoritma bulamadık!</p>

  <p>Şekil 4.1’de yinelenen bir kümeyi, verilen bir noktanın kümeye ait olup olmadığını doğrudan söylemenin mümkün olduğunu düşünebilmemiz için, basit sınırlara sahip bir alan şeklinde şematik olarak göstermeye çalıştım. Resimdeki her noktanın, doğal bir sayıyı temsil ettiği düşünülmelidir. Tümleyen küme de, basit görünüşlü bir alan olarak gösterilmektedir. Şekil 4.2’de, tekrarlı sayılabilir fakat yinelenmeyen bir kümeyi karmaşık sınırlara sahip bir küme olarak göstermeğe çalıştım; bu resimde, sınırın tekrarlı sayılabilir tarafındaki kümenin, diğer taraftaki kümeye kıyasla daha basit görünümlü olmasına çalışılmıştır. Şekiller son derece şematik tasarımlanmış olup, herhangi bir anlamda ‘geometrik yönden doğru' olmaları amaçlanmamıştır. Özellikle, düz iki-boyutlu bir düzlem gibi gösterilmiş olmalarının bir önemi yoktur!</p>

  <p style="text-align: center;"><img alt="" src="../Images/2_main-1.png" style="width:80%" /></p>

  <p><b>Şekil 4.1. Yinelenen bir kümenin son derece şematik tasarımı.</b></p>

  <p style="text-align: center;"><img alt="" src="../Images/2_main-2.png" /></p>

  <p><b>Şekil 4.2. Tekrarlı sayılabilir fakat yinelenemeyen bir kümenin (siyah alan) son derece şematik tasarımı. Amaç, beyaz alanının, hesaplanarak üretilebilen siyah alan çıkarıldıktan sonra sadece ‘geriye kalan’ olarak nitelenebileceğini göstermektir; bir noktanın gerçekte beyaz alanda yer aldığını iddia etmek hesaplanabilir bir konu değildir.</b></p>

  <p>Şekil 4.3’de, <span style="font-style:italic;">P, T ve A</span> alanlarının, N kümesi içerisinde nasıl yer aldıklarını şematik olarak gösterdim.</p>

  <h2 id="u7e92b101-e011-43e8-95b6-483a8ba137e0">Mandelbrot Kümesi Yinelenen Bir Küme midir?</h2>

  <p>Yinelenmeyen kümeler, gereğince karmaşık olma özelliğine sahip olmalıdırlar. Karmaşıklıkları, bir anlamda, tüm sistemleştirme girişimlerine karşı koyacak ölçüde olmalıdır. Aksi halde, böyle bir sistemleşme herhangi bir uygun algoritmik yöntemin elde edilmesiyle sonuçlanabilir. Yinelenmeyen bir küme için, bir elemanın (veya ‘noktanın’) kümeye ait olup olmadığına karar vermekle ilgili genel bir algoritmik yöntem yoktur. III. Bölüm’ün başında, Mandelbrot kümesi adıyla anılan, olağanüstü karmaşık görünüşlü bir kümeyle tanışmıştık. Tanımlanmasında kullanılan kurallar şaşılacak kadar basit olmasına karşın bu küme, son derece özenli bir yapının sonsuz çeşitlerini sergiler. Ölümlü gözlerimizin önüne serilen böyle bir yapı, yinelenmeyen bir küme örneği olabilir mi?</p>

  <p>Ancak okuyucu, bu son derece karmaşık yapının, yüksek-hızlı modern elektronik bilgisayar teknolojisiyle görebilmemiz için inşâ edildiğine dikkat etmekte gecikmeyecektir.</p>

  <p style="text-align:center;"><img alt="" src="../Images/2_main-3.png" /></p>

  <p><b>Şekil 4.3. Çeşitli önermeler kümelerinin son derece şematik tasarımı. Sistemde kanıtlanabilir önermeler kümesi P, A gibi, tekrar tekrar sayılabilir olmasına karşın yinelenebilir değildir; doğru önermeler kümesi, T, tekrar tekrar sayılabilir bile değildir.</b></p>

  <p>Elektronik bilgisayarlar, algoritmik işlemin nesnelleşmiş şekli değiller midir? Kuşkusuz öyledirler ama bu resimleri bilgisayarın ürettiğini unutmayalım. Argand düzle<span style="">min</span>deki bir noktanın, yani bir c kompleks sayısının, Mandelbrot kümesine mi (siyah renkli) yoksa tümleyen kümeye mi (beyaz renkli) ait olduğunu saptamak için bilgisayar</p>

  <p style="text-align: center;"><span style="font-style:italic;">z → z<sup>2</sup> + c</span></p>

  <p>gönderimini, c sayısını elde etmek için önce <i>Z</i> = <span style="font-style:italic;">0’</span>a, sonra c<sup>2</sup> + c sayısını elde etmek için z = c’e, sonra <span style="font-style:italic;">c<sup>4</sup> + 2c<sup>3</sup> + c<sup>2</sup> + c</span> sayısını elde etmek için <span style="font-style:italic;">z = c<sup>2</sup> + c</span> sayısına vb. uygulayacaktır. Eğer, <span style="font-style:italic;">0, c, c<sup>2</sup> + c, c<sup>4</sup> + 2c<sup>3</sup> + c<sup>2</sup> + c,</span> ...dizisi yakınsaksa c tarafından temsil edilen nokta siyah renklidir; aksi halde beyaz renklidir. Makine, böyle bir dizinin <span style="font-style:italic;">yakınsak</span> olup olmadığını nasıl bilir? İlke olarak bu soruda, dizinin <span style="font-style:italic;">sonsuz</span> sayıda terim sonrasında ne olacağının bilindiği farz edilir. Yani soru, tek başına, hesaplanabilir bir konu değildir. Neyse ki, elemanların yalnız sonlu bir sayısından sonra dizinin ıraksak olduğunu söyleyebilmenin birçok yolu vardır (Gerçekte, 1 + <span style="font-style:italic;">√2</span> yarıçapındaki daireye ulaşır ulaşmaz dizinin ıraksak olduğundan emin olabiliriz).</p>

  <p>Buna göre, belli bir anlamda, Mandelbrot kümesini tümleyen küme (yani, beyaz alan) tekrarlı sayılabilir bir kümedir, c kompleks sayısı beyaz alanda yer alıyorsa, bu gerçeği kanıtlayacak bir algoritma da var demektir. Peki, siyah alandan, yani bizzat Mandelbrot kümesinden ne haber? Siyah alanda yer aldığı sanılan bir noktanın gerçekten siyah alanda yer aldığını kesinlikle bildirecek bir algoritma var mı? Bu sorunun yanıtı henüz bilinmiyor.<a href="../Text/notbolum4.xhtml#nb49" id="nb49d"><sup>[9]</sup></a> Bu konuda meslektaşlarıma ve uzmanlara danıştım, ama hiç birisi böyle bir algoritmanın varlığından haberdar görünmüyordu. Böyle bir algoritmanın varolmadığına dair bir kanıta da rastlamamışlardı. En azından, siyah alan için bilinen bir algoritma mevcut değil gibi görünüyor. Belki Mandelbrot kümesini tümleyen küme, aslında, tekrarlı sayılabilir fakat yinelenemeyen bir kümenin örneğidir.</p>

  <p>Bu öneriyi daha açık irdelemeden önce, şöylece değindiğim bazı konuları ayrıntılamak gerekecek. Bu konular, fiziğin hesaplanabilir ligi ile ilgili olarak daha sonra yapacağımız tartışmalar yönünden önemlidir. Daha önceki tartışmalarda pek fazla açık ifadeler kullandığım söylenemez. Argand düzlemindeki noktaların kümeleri, yani kompleks sayıların kümeleri, için ‘tekrarlı sayılabilir’ ve ‘yinelenen’ gibi terimler kullandım. Bu terimlerin, kesinlikle, yalnız doğal sayılar veya diğer sayılabilir kümeler için kullanılması gerekir. III. Bölüm’de reel sayıların sayılamadığını ve bu nedenle kompleks sayıların da sayılamadığını çünkü reel sayıların, kompleks sayıların özel bir türü, yani sanal kısımları sıfıra eşit kompleks sayılar olarak düşünülebildiklerini görmüştük. Aslında, reel sayılar kadar ‘çok sayıda’ yani C kadar, kompleks sayı vardır (Kompleks sayılarla reel sayılar arasında bire-bir ilişki kurmak için, her bir kompleks sayının reel ve sanal kısımlarının genişletilmiş ondalık açılımlarını alabilir ve bunların karşıtı reel sayının tek ve çift rakamlarına göre ilişkilendirebiliriz: Örneğin, 3.6781 ... + i 512.975 ... kompleks sayısı 50132 . 6977851... sayısına karşı gelecektir).</p>

  <p>Bu sorundan kaçınmanın bir yolu, yalnız hesaplanabilir kompleks sayıları kullanmaktır, çünkü III. Bölüm’de gördüğümüz gibi, hesaplanabilir reel sayılar, ve bu nedenle de hesaplanabilir kompleks sayılar, gerçekten sayılabilir. Ancak bu konuda ciddi bir zorluk vardır: İlgili algoritmalarına göre verilen hesaplanabilir iki sayının birbirine eşit olup olmadığına karar vermemizi sağlayacak bir algoritmaya sahip değiliz! (Aralarındaki farkı algoritmik yöntemle oluşturabiliriz ama bu farkın sıfır olup olmadığına algoritmayla karar veremeyiz.)</p>

  <p style="text-align:center"><img alt="" src="../Images/2_main-4.png" /></p>

  <p><b>Şekil 4.4. Birim disk, uygun bir bakış açısından yinelenen bir küme olarak yorumlanabilir.</b></p>

  <p>Sırasıyla 0.99999... ve 1.00000... rakamlarını üreten iki algoritmanın varolduğunu farz edelim, İki sayının eşit olduğunu gösterecek şekilde 9'ların veya 0’ların sonsuza değin devam edip etmeyeceklerini, veya sonunda bir başka rakamın ortaya çıkarak sayıların eşit olmadığını gösterip göstermeyeceğini asla bilemeyiz). Bu durumda, bu sayıların eşit olup olmadığını asla öğrenemeyebiliriz. Argand düzlemindeki birim disk gibi basit bir kümeyle bile (merkezden uzaklıkları bir birimden fazla olmayan noktaların kümesi, yani Şekil 4.4’deki siyah alan) bir kompleks sayının disk üzerinde gerçekten yer alıp almadığına kesinlikle karar vermemizi sağlayacak bir algoritma bulunmayabilir. Sorun, diskin içindeki (veya dışındaki) noktalardan değil, fakat diskin tam sınırında, yani bizzat birim çemberde, yer alan noktalardan kaynaklanır. Birim çemberi, diskin bir parçası olarak kabul edelim. Bir algoritmanın, herhangi bir karmaşık sayının reel ve reel olmayan kısmına ait rakamları ürettiğini varsayalım. Bu kompleks sayının birim çember üzerinde yer aldığından kuşkulanıyorsak, bunu mutlaka kanıtlayamayabiliriz.</p>

  <p><span style="font-style:italic;">x<sup>2</sup> + y<sup>2</sup></span></p>

  <p>hesaplanabilir sayısının gerçekten 1’e eşit olup olmadığına karar verebileceğimiz bir algoritma yoktur, çünkü buna karar vermek, hesaplanabilir kompleks <span style="font-style:italic;">x + i y</span> sayısının, birim çember üzerinde yer alıp almadığının saptanması kriterinden başka bir şey değildir.</p>

  <p>Kuşkusuz, istediğimiz bu değil. Birim disk elbette yinelenen küme kabul edilmeli. Birim diskten daha basit pek fazla küme yok! Sorunu çözmenin bir yolu sınırı gözardı etmek olabilir. Diskin gerçekten içindeki ve diskin gerçekten dışındaki noktalarla ilgili olarak bu gerçekleri kanıtlayan bir algoritma mevcuttur (Sadece <span style="font-style:italic;">x<sup>2</sup></span> + <span style="font-style:italic;">y<sup>2</sup></span> rakamlarını peşpeşe üreterek 0.99999...’da ondalık noktasından sonra 9’dan başka bir rakam, veya 1.00000...’de 0’dan başka bir rakam bulabiliriz). Bu bağlamda birim disk yinelenen bir kümedir. Fakat savların, çoğu kez, sınırlarda neler olup bittiğine bakarak ifade edilmesi gerektiğinden, matematik yönünden bu bakış açısı oldukça anlamsız bir yaklaşımdır. Öte yandan, böyle bir bakış açısı fizik yönünden uygun olabilir. Bu konuya daha sonra döneceğiz.</p>

  <p>Benimseyebileceğimiz ve konuyla yakından <span style="">ilişkili</span> bir görüş olanağı daha var ve bu görüşte, hesaplanabilir kompleks sayılarla ilgilenilmiyor. Söz konusu kümenin içindeki veya dışındaki kompleks sayıları saymaya çalışmak yerine, bir kompleks sayı verilmesi koşuluyla, bu sayının kümenin içinde mi, yoksa tümleyenin içinde mi yer aldığına karar veren bir algoritmaya gerek duyarız sadece. ‘Verilmesi’ dedim, çünkü denemekte olduğumuz her kompleks sayıda, reel ve reel olmayan kısımlara ait birbirini izleyen rakamlar, istediğimiz sürece, belki sihirli bir yöntemle, birbiri ardına ortaya çıkarlar. Bu rakamları ortaya çıkarmak için, bilinen veya bilinmeyen herhangi bir algoritmanın varolmasına ihtiyacım yok. Yalnız ve yalnız kompleks sayının gerçekten kümede yer alması koşuluyla, tek bir algoritma bu gibi rakamlar dizisine uygulandığında, sınırlı sayıda aşamalar sonrası ‘evet’ diyorsa, bir kompleks sayılar kümesi, ‘tekrarlı sayılabilir’ addedilecektir. Bu konuda açıkladığımız ilk görüş gibi bu görüş de, şuurları ‘tanımıyor’. Bu nedenle birim diskin içinin ve birim diskin dışının her biri, bu anlamda, tekrarlı sayılabilir olurken, sınırın kendisi olmayacaktır.</p>

  <p>Her iki görüş de bana gerçekten gereksinim duyulan görüş gibi gelmiyor.<a href="../Text/notbolum4.xhtml#nb410" id="nb410d"><sup>[10]</sup></a> Mandelbrot kümesine uygulandığında, ‘sınır tanımamak’ felsefesi, kümenin karmaşıklığının çoğuna ulaşamayabilir. Bu küme kısmen lekeler’den -içi dolgulu alanlar- ve kısmen ‘<span style="">filiz</span>ler’den oluşur. En karmaşık kısımlar, alabildiğine kıvrılarak uzanan filizlerde yer alır. Ancak filizler, kümenin içinde yer almazlar ve bu nedenle, iki felsefeden birini benimsediğimiz takdirde, dikkate alınmayacaklardır. Böyle de olsa, yalnız lekelerin dikkate alındığı Mandelbrot kümesinin ‘yinelenen’ olup olmadığı açıkça bilinmemektedir. Sanırım bu sorunun kaynağı, Mandelbrot kümesi ile ilgili kanıtlanmamış bir iddiadadır: Küme, 'yerel bağlantılı’ mıdır? Bu ter<span style="">imin anl</span>a<span style="">mını</span> veya konumuzla ilgisini burada açıklamak niyetinde değilim. Sadece, bu konuların zor konular olduğuna ve henüz çözümlenmemiş olan Mandelbrot kümesiyle ilgili, ve bazıları günümüzün matematik araştırmalarının ön cephesinde yer alan soruların sorulmasına neden olabileceğine dikkat çekmek istiyorum.</p>

  <p>Kompleks sayıların sayılamaz olduğu problemine yeni yaklaşımlar getiren ve benimseyebileceğimiz başka görüşler de vardır, Hesaplanabilen tüm kompleks sayıları ele almak yerine, bu sayılardan <span style="">ik</span>isinin eşit olup olmadığına karar vermenin hesaplanabilir bir konu olduğunu savunan nitelikte uygun bir alt-kümeyi ele alabiliriz. Böyle bir alt-küme, sayıların reel ve reel olmayan kısımlarının her ikisinin rasyonel sayılar olarak alındığı, ‘<span style="font-style:italic;">rasyonel</span>’ kompleks sayılardır. Ancak, fazlaca sınırlayıcı olması nedeniyle bu görüşün, Mandelbrot kümesinin sarmaşık filizleriyle başa çıkabileceğini sanmıyorum. Belki biraz daha tatmin edici bir yöntem olarak cebirsel sayılardan, yani tamsayı çarpanlı cebirsel denklemlerin çözümleri olan kompleks sayılardan, yararlanabiliriz. Örneğin,</p>

  <p><span>129</span> <span style="font-style:italic;">z<sup>7</sup></span> - <span style="font-style:italic;">33z<sup>5</sup> +</span> 72<span style="font-style:italic;">5z<sup>4</sup></span> + 16z<sup>3</sup> - <span style="font-style:italic;">2z</span> - <span style="font-weight:bold;">3</span> = 0</p>

  <p>denkleminin <span style="font-style:italic;">z</span> için tüm çözümleri cebirsel sayılardır. Cebirsel sayılar sayılabilir, hesaplanabilir ve bunlardan ikisinin eşit olup olmadığına karar vermek gerçekten hesap edilebilir bir konudur (Rastlantıya bakın ki, bu sayılardan pek çoğu birim çemberin üzerinde ve Mandelbrot k<span style="">üm</span>esi<span style="">ni</span>n filizleri üzerinde yer alır). İstenirse, Mandelbrot kümesinin yinelenen olup olmadığı sorusunu, bu sayılarla ifade edebiliriz.</p>

  <p>Cebirsel sayılar, yukarıda değindiğimiz iki küme bakımından uygun olabilirse de, genelde karşılaştığımız tüm zorlukları çözümleyemezler. Argand düzleminde <span style="font-style:italic;">x + i y (= z)</span> için</p>

  <p><span style="font-style:italic;">y</span> ≥ <span style="font-style:italic;">e<sup>x</sup></span></p>

  <p>bağıntısıyla tanımlanan kümeyi (Şekil 4.5 deki siyah alan) ele alalım. Kümenin içi ve tümleyen kümenin içi, yukarıda açıklanan görüşlerin herhangi birine göre, tekrarlı sayılabilir, fakat (1882’de kanıtlanan ünlü F. Lindemann teoremine göre) sınırın kendisi <span style="font-style:italic;">y = e<sup>x</sup></span> tek bir cebirsel noktaya, <span style="font-style:italic;">z = i’e,</span> sahiptir. Bu durumda cebirsel sayılar, sınırın algoritmik özelliğini araştırmak konusunda bize yardımcı olmaz! Bu kendine özgü nitelikteki konuda yeterli olabilecek bir başka hesaplanabilir sayılar altsınıfı bulmak zor olmayabilir ama doğru görüşe henüz ulaşamamış olmanın sıkıntısından da kurtulamıyoruz.</p>

  <p><img alt="" src="../Images/2_main-5.png" style="width:257pt;height:169pt;" /></p>

  <p><b>Şekil 4.5. y≥e<sup>x</sup> bağıntısıyla tanımlanan küme de ‘yinelenen' olarak nitelemnelidir.</b></p>

  <h2 id="ue4f3fb33-2251-41d3-9084-d4d2f59f76c8">Yinelenmeyen Matematik Problemlerine Bazı Örnekler</h2>

  <p>Matematiğin yinelenmeyen problemlerle karşılaşıldığı birçok alanı vardır. Bu nedenle, yanıtı ya ‘evet’ veya ‘hayır’ olan, fakat bu yanıtlardan hangisinin doğru olduğuna karar verilmesini sağlayacak genel bir algoritmanın varolmadığı problemler sınıflarından bazıları son derece basit görünüşlüdür.</p>

  <p>Önce, tamsayı çarpanlı cebirsel denklem sistemlerinin tamsayı çözümlerinin bulunması problemini ele alalım. Bu denklemler, İ.Ö. üçüncü yüzyılda yaşamış olan ve bu tip denklemleri inceleyen Yunan matematikçi Diophantos’un adıyla Diophantos denklemleri olarak anılır. Söz konusu denklemler kümesine örnek olarak,</p>

  <p><span style="font-style:italic;">z<sup>3</sup> - y -1 = 0, yz<sup>2</sup>-2x-2 = 0, y<sup>2</sup>-2xz + z + 1 = 0</span></p>

  <p>denklemlerini verebiliriz ve burada problem, <span style="font-style:italic;">x, y</span> ve <span style="font-style:italic;">z tamsayı</span> değerleri için denklemlerin çözülür olup olmadığına karar vermektir. Gerçekte, bu denklemler,</p>

  <p><span style="font-style:italic;">x</span> = 13, <span style="font-style:italic;">y =</span> 7, <span style="font-style:italic;">z = 2</span></p>

  <p>olarak verildiğinde çözülebilir. Ancak, zorunlu bir Diophantos denklemleri kümesi için<a href="../Text/notbolum4.xhtml#nba4X" id="nba4Xd"><sup>[X]</sup></a> bu kararı verecek bir algoritma yoktur: Diophantos aritmetiği, basit içeriğine karşın, algoritmik olmayan matematiğin kapsamındadır. Daha da basit bir örnek <span style="font-style:italic;">manifoldların topolojik eşdeğerliliğidir.</span> VIII. Bölüm’de tartışılacak konularla oldukça ilişkili olduğu için bu örneğe kısaca değiniyorum. 'Manifold’un ne olduğunu anlamak için önce bir ipin ilmeğini düşünün; bu, <span style="font-style:italic;">bir</span> boyutlu bir manifolddur. Sonra kapalı bir yüzey düşünün; bu da <span style="font-style:italic;">iki</span> boyutlu bir ma<span style="">nif</span>olddur. Daha sonra, <span style="font-style:italic;">üç</span> veya daha fazla boyuta sahip bir ‘yüzey' düşlemeye çalışın. İki manifoldun ‘topolojik eşdeğerliğinin’ anlamı, ikisinden birinin diğerinin üstüne, kopmadan veya yapışmadan, sürekli bir hareketle şekil değiştirerek örtülebilmesidir. Bu nedenle, bir küre yüzeyi ile bir küpün yüzeyi topolojik eşdeğerlidir; öte yandan her ikisi, bir yüzüğün veya bir çay fincanının yüzeyi ile eşdeğerli değildir; halbuki yüzük ile çay fincanı topolojik olarak eşdeğerlidir. Bu bize, <span style="font-style:italic;">iki-</span>boyutlu manifoldlar için, bunlardan ikisinin topolojik eşdeğerli olup olmadığına karar verecek bir algoritma bulunduğunu gösteriyor. Üç-boyutlular için bu sorunun yanıtı kitabın yazıldığı bu günlerde, henüz bilinmemektedir, ama dört ve daha fazla boyutlar için, eşdeğerliliği saptayacak bir algoritma yoktur. Dört-boyutlu manifold örnekleri fizikle biraz ilgilidir, çünkü Einstein’ın genel görelilik teorisi uyarınca, uzay ve zaman birlikte 4 boyutlu bir manifold oluştururlar; (<a href="../Text/bolum5.xhtml">bkz. V. Bölüm</a>) Geroch ve Hartle (1986), bu algoritma-dışı niteliğin, ‘kuantum kütleçekim kuvveti’ ile ilişkili olabileceğini öne sürmüşlerdir (Bkz. VIII. Bölüm ).</p>

  <p>‘Sözcük problemi’ adı verilen başka tür bir problemi ele alalım.<a href="../Text/notbolum4.xhtml#nb411" id="nb411d"><sup>[11]</sup></a> Diyelim ki, bir çeşit simgeler alfabemiz var ve bu simgelerin çeşitli dizilerine ‘sözcükler’ adı veriliyor. Sözcüklerin anlamları olması gerekmiyor, fakat diyelim ki elimizde daha başka ‘eşitlikler’ kurabilmemizi de sağlayan, sözcükler arasındaki ‘eşitlikleri’ gösteren belirli (ve sonlu) bir liste mevcut. Daha fazla eşitlikler bulmak için, elimizdeki listede yer alan sözcüklerin yerini tutacak ve bu sözcüklerin bazı bölümlerini içerecek başka sözcükler (doğal olarak daha uzun sözcükler) üretebiliriz. Sözcüklerin her bir bölümünün yerine, listeye göre eşit olduğu varsayılan bir başka bölüm konulabilir. Bu durumda problem, verilen herhangi bir çift sözcüğün, bu kurallar çerçevesinde ‘eşit’ olup olmadıklarına karar vermektir.</p>

  <p>Örneğin, ilk listemize aşağıdaki sözcükleri alabiliriz:</p>

  <p style="text-align: center;"><img alt="" src="../Images/2_main-6.png" /></p>

  <p>Bu sözcüklerden, örneğin,</p>

  <p>LAP = LEAP</p>

  <p>sözcüklerini aşağıdaki gibi, sürekli olarak türetebiliriz:</p>

  <p>LAP = LATEP = LEATEP = LEAP</p>

  <p>Şimdi problem, bir çift sözcük verildiğinde, birinden diğerine geçebilir miyiz? Örneğin, CATERPILLAR’dan MAN’i, veya diyelim, CARPET’dan MEAT’i türetebilir miyiz? Birinci örnek için yanıtın ‘evet’, İkincisi için 'hayır’ olduğunu düşünelim. Yanıt ‘evet’ ise, bunu göstermenin doğal yolu, aralarındaki olası bir ilişkiyi kullanarak her bir sözcüğün bir öncekinden türetildiği bir eşitlikler dizisi sergilemektir. Değişecek harfleri kalın punto harflerle, henüz değiştirilmiş olanları italik harflerle göstermek suretiyle, aşağıdaki türevleri elde ederiz:</p>

  <p>C<b>ATE</b>RPILLAR = CARPILL<b>A</b>R = CARPIL<b>LATER</b>= CAR<b>PILLOW</b> = <b>CARP</b>AN = ME<b>A</b>N = M<b>EAT</b>EN = M<b>ATE</b>N = MAN.</p>

  <p>Bilinen kurallara uyarak CARPET’dan MEAT’i türetmenin m<span style="">ümk</span>ün olmayacağını nasıl söyleyebiliriz? Bunun için biraz daha düşünmemiz gerekir ama çok çeşitli yollar bulmamız hiç de zor değil. En basit yol şu olabilir: İlk listemizdeki her ‘eşitlik’de, eşitliğin her iki tarafındaki A’ların sayısı artı W'ların sayısı artı M’lerin sayısı aynıdır. Buna göre, A’ların, W’ların ve M’lerin toplamı, yapabileceğimiz herhangi bir türevler dizisi boyunca değişmez. Ancak, CARPET için bu sayı 1 iken MEAT için 2’dir. Sonuçta, uygulanabilen bir türev yöntemiyle CARPET’dan MEAT'i türetmemizin bir yolu yoktur.</p>

  <p>İki kelime ‘eşit’ olursa bunu, bilinen kurallar çerçevesinde, biçimsel bir simgeler dizisi halinde gösterebiliriz. Oysa ‘eşit olmamaları’ durumunda, kurallar <span style="font-style:italic;">hakkındaki</span> savlara baş vurmamız gerekiyor. Sözcükler gerçekte ‘eşit' oldukları zaman sözcüklerin arasındaki ‘eşitliği’ göstermek için kullanabileceğimiz belirgin bir algoritma vardır. Yapmamız gereken sadece, sözcüklerin olası tüm dizilerini leksikograftk bir liste halinde düzenlemek ve sonra, uygulanabilir herhangi bir kural çerçevesinde ikinci sözcüğün birincisinden türemediği, yanyana bir çift sözcüğün yer aldığı böyle bir diziyi listeden çıkarmaktır. Geriye kalan diziler, sözcükler arasında aradığımız tüm ‘eşitlikleri’ gösterecektir. Oysa, iki sözcüğün ne zaman ‘eşit’ olmadığına karar vermek için, genelde, böyle bir belirgin algoritma yoktur, ve bunu kanıtlamak için ‘zekâ’ya başvurmak zorunda kalabiliriz (Gerçekten de, CARPET ve MEAT’in ‘eşit’ olmadığını göstermek için yukardaki ‘hile’nin farkına varmam uzun sürdü. Başka bir örnek için, tamamen farklı bir 'hile’ gerekebilir. Bu arada zekâ, bir ‘eşitliğin’ <span style="font-style:italic;">varlığını</span> göstermek için, gerekli olmasa bile yararlı olabilir).</p>

  <p>Yukarıdaki birinci liste örneğindeki beş ‘eşitlik’ için, gerçekten ‘eşit olmadıkları’ zaman iki sözcüğün eşit olmadığını kanıtlayan bir algoritma bulmak o kadar zor değildir. Ancak, bu amaçla uygulanabilir bir algoritma <span style="font-style:italic;">bulmak</span> için zekâmızı büyük ölçüde kullanmamız gerekir! Aslında, birinci listedeki <span style="font-style:italic;">tüm</span> olası seçeneklere evrensel olarak uyarlanabilecek hiçbir algoritmanın bulunmadığı sonunda anlaşılır. Bu bağlamda, sözcük probleminin hiçbir algoritmik çözümü yoktur. Genel sözcük problemi, yinelenmeyen matematiğe aittir!</p>

  <p>İlk listede, iki sözcüğün ne zaman eşit olmadığına karar verecek bir algoritmanın varolmadığı bazı <span style="font-style:italic;">özel</span> eşitlikler bile yer almaktadır:</p>

  <p style="text-align: center;"><img alt="" src="../Images/2_main-7.png" /> <img alt="" src="../Images/2_main-8.png" /> <img alt="" src="../Images/2_main-9.png" /></p>

  <p><b>Şekil 4.6. Her birinde tek bir tür karo kullanılarak düzlemin periyodik kaplanması ile ilgili iki örnek (Marjorie Rice tarafından 1976’da bulunmuştur),</b></p>

  <p>(Bu liste, G.S. Tseitin ve Dana Scott tarafından 1955’de verilen listeden uyarlanmıştır; bkz. Gardner 1958) Buna göre sözcük problemi, söz konusu listeyi kullanarak verilen iki sözcüğün ‘eşitliği’ne algoritmik olarak karar veremeyeceğimiz bağlamında, <span style="font-style:italic;">tek başına</span> bir örnek oluşturmaktadır.</p>

  <p>Genel sözcük problemi, biçimselleştirilmiş matematiksel mantık varsayımlarından ortaya çıkmıştır (‘formel sistemler’ vs. daha önce ele almıştık.) ilk sözcük listesi, bir aksiyom sistemi ve sözcükler için bir türev kuralı rolünü oynar. Bu rol, yöntemin biçimsel kurallarıdır. Sözcük probleminin yinelenemez olmasının ispatı bu varsayımlardır.</p>

  <p>Matematikte yinelenemeyen probleme son bir örnek olarak Eukleides düzleminin çokgen şekillerle kaplanması problemini ele alalım. Elimizde sınırlı sayıda ve farklı tipte şekiller bulunsun. Yalnız bu şekilleri kullanarak, aralarında hiçbir boşluk kalmayacak veya birbirinin üstüne binmeyecek şekilde düzlemi tamamen kaplamamızın mümkün olup olmadığını öğrenmek istiyoruz. Şekillerin böyle düzenlenmesine düzlemin ‘karo kaplanması’ adı verilir. Biliyoruz ki, bu gibi karo kaplamaları, kareler, eşkenar üçgenler, veya düzgün altıgenler (Şekil 10.2, X. Bölüm) kullanılarak gerçekleştirilebilir ama düzgün beşgenler kullanılarak gerçekleştirilemez. Düzlemin karo kaplanmasında, Şekil 4.6’da gösterildiği üzere, <span style="font-style:italic;">düzgün olmayan</span> iki beşgenden her biri gibi diğer birçok tekli şekiller de düzlemin karo kaplanmasını oluşturabilir. Bir çift şekil kullanılarak, karo kaplama daha özenli yapılabilir. Şekil 4.7’de iki basit örnek verilmektedir. Tüm bu örneklerin ortak özelliği ‘periyodik’, yani her iki yönde tekrarlanabilir olmasıdır.</p>

  <p style="text-align: center;"><img alt="" src="../Images/2_main-10.png" /></p>

  <p>Şekil 4.7. İki ayrı karo türü kullanarak, düzlemin periyodik kaplanması ile ilgili iki örnek.</p>

  <p><img alt="" src="../Images/2_main-11.png" style="width:278pt;height:159pt;" /></p>

  <p><b>Şekil 4.8 Periyot paralelkenarı ile ilişkilendirilmiş olarak gösterilen bir periyodik karo kaplama</b></p>

  <p><span style="">Matematik terimleriyle ifade etmek gerekirse,</span> <span style="font-style:italic;">bir periyod paralelkenarı yankı</span> <span style="">diyoruz;</span> bu paralelkenar, bir <span style="">şekilde işaretlenip sonra kenarlarına paralel olarak iki yönde tekrar tekrar yinelendiği zaman verilen karo kaplama desenini üretmektedir. Şekil 4.8, bunun bir örneğini göstermektedir: Diken biçiminde bir karoyla yapılan periyodik kaplama sol tarafta gösterilirken, periyodik kaplaması sağda gösterilen bir periyod paralelkenar ile ilişkilendirilmiştir.</span></p>

  <p>Düzlem <span style="">periyodik olmaksızın da kaplanabilir. Şekil 4.9’da 'he</span>lisel’ <span style="font-weight:bold;">karoların Şekil 4.8’deki diken biçimi karolarla birlikte periyodik olmayan kaplaması</span> üç <span style="">ayrı tipte gösterilmiştir. Bu değişik düzlem kaplama 'her yöne uzanabilen’ olarak adlandırılır (açıkça belli nedenlerle!) ve daha Önce H. Voderberg tarafından bulunmuş şekle dayanılarak B. Grünbaum ve G.C. Shephard (1981-1987) tarafından uygulanmıştır. Bu tür karonun hem periyodik hem de periyodik olmayan kaplama yapabildiğine dikkat ediniz. Bu özellik tek veya küme halindeki karo kaplamalarda da görülür. Düzlemi yalnız periyodik olmayacak şekilde kaplayan tek karolar veya küme karolar var mıdır? Bu sorunun yanıtı</span> evet’dir. Şekil <span style="">4.10’da, Amerikalı matematikçi Raphael Robinson (1971) tarafından inşâ edilen altı karolu bir küme görülmektedir.</span></p>

  <p>Periyodik olmayan karo kümelerinin tarihçesinden biraz bahsetmek istiyorum (bkz, Grünbaum ve Shephard 1987). 1961 yılında, Çin kökenli Amerikalı mantık b<span style="">ilim</span>cisi Hao Wang, karo kaplama problemi ile ilgili olarak bir karar yönteminin varolup olmadığı sorusunu yöneltti. Başka bir deyişle, düzlemi tümüyle kaplayacak farklı çokgen karolardan oluşan belirli bir sonlu kümenin varolup olmadığına karar verecek bir <span style="font-style:italic;">algoritma</span> var mıdır?<a href="../Text/notbolum4.xhtml#nba4XI" id="nba4XId"><sup>[XI]</sup></a> Hao Wang, düzlemi herhangi bir şekilde kaplayacak farklı karolardan oluşan her sonlu kümenin, düzlemi gerçekte periyodik olarak da kaplayacağı gösterilebilseydi, böyle bir karar yönteminin gerçekten var olabileceğini göstermiştir.</p>

  <p style="text-align: center;"><img alt="" src="../Images/2_main-12.png" /></p>

  <p><b>Şekil 4.9. Şekil 4.8’dekinin aynı 'her yöne uzanabilen’ biçimi kollanan üç ayrı periyodik olmayan 'helise' karo kaplama.</b></p>

  <p>Sanırım, o zamanlar, böyle bir koşula aykırı bir kümenin, yani ‘periyodik olmayan' karolar kümesinin, var olabileceğine inanılmıyordu. Ancak, 1966 yılında Robert Berger, Hao Wang’ın bazı ipuçlarını değerlendirerek, karo kaplama problemi ile ilgili hiçbir karar yönteminin varolmadığını göstermeyi başardı: Karo kaplama problemi de, yinelenemeyen matematik sorularının bir parçasıdır!<a href="../Text/notbolum4.xhtml#nb412" id="nb412d"><sup>[12]</sup></a></p>

  <p>Böylece, Hao Wang'ın periyodik olmayan karolar kümesinin varolması gerektiği sonucundan hareketle Berger, ilk periyodik-olmayan karolar kümesini inşa etmişti. Ancak, Berger kümesi 20 426 gibi son derece fazla sayıda karo kullanımını gerektirdiği için Berger, biraz daha beceri göstererek bu sayıyı 104’e indirdi. 1971 yılında Raphael Robinson söz konusu sayıyı, Şekil 4.10’da gösterilen 6 karoya kadar indirmiştir.</p>

  <p>Başka bir periyodik-olmayan altılı küme Şekil 4.11'de gösterilmiştir. 1973’de, tamamen bağımsız bir düşünce çizgisi izleyerek bu kümeyi ben tasarımladım (Bu konuya X. Bölüm’de tekrar döneceğim; Şekil 10.3). Robinson’un periyodik-olmayan altılı kümesini gördükten sonra, bu sayıyı nasıl azaltabilirim diye düşünmeye başladım; keserek, tekrar yapıştırarak sürdürdüğüm çeşitli denemeler sonrası, karo sayısını ikiye düşürebildim. Şekil 4.12’de iki ayrı tasarım gösterilmiştir. Kaplama işlemi tamamlandığında ortaya çıkan periyodik şekiller, beş-katlı simetriye sahip ve kristal yapısına tamamen aykırı periyodiksi bir yapı dahil, <span style="">dik</span>kate değer birçok özelliklere sahiptir. Bu konuya daha sonra tekrar döneceğim. Matematiğin böylesine ‘basit’ bir alanının, bir düzlemin birbirine uyan parçalarla kaplanması gibi neredeyse ‘çocuk oyunu’ bir işlemin gerçekte matematiğin yinelenmeyen problemler konusunun bir kısmını oluşturması ilginç görülebilir. Aslında bu alanda zor ve çözümlenmemiş problemler vardır. Örneğin, tek karodan oluşan ve periyodik-olmayan bir kümenin varolup olmadığı bilinmemektedir.</p>

  <p>Wang, Berger ve Robinson'un yaklaşımlarıyla problemde kare karolar kullanılmıştı. Ben, herhangi bir şekle sahip çokgenler kullanılabilir diyorum, yeter ki her bir karoyu göstermenin hesaplanabilir bir yöntemi var olsun. Bu yöntemlerden birisi, karoların, köşelerini, Argand düzleminin noktaları olarak kabul etmektir.</p>

  <p style="text-align: center;"><img alt="" src="../Images/2_main-13.png" /></p>

  <p><b>Şekil 4.10. Raphael Rabinson’un, düzlemi yalnız periyodik-olmayarak kaplayabilen altılı kümesi.</b></p>

  <p style="text-align: center;"><img alt="" src="../Images/2_main-14.png" /></p>

  <p><b>Şekil 4.11. Düzlemi yalnız periyodik-olmayarak kaplayabilen bir başka altılı küme.</b></p>

  <p>Bu noktaları, cebirsel sayılarla göstermek pekâlâ mümkündür.</p>

  <p style="text-align: center;"><img alt="" src="../Images/2_main-15.png" /></p>

  <p><b>Şekil 4.12. Her biri sadece periyodik-olmayarak kaplayabilen iki çift karo (‘Penrose karoları’); ve düzlemin her bir çift-karoyla kaplanmış bölgeleri.</b></p>

  <h2 id="ubf9d39b4-fc12-4d1d-8d54-c3dd7f026bdc">Mandelbrot Kümesi Yinelenmeyen Matematiğe Benzer mi?</h2>

  <p>Yine Mandelbrot kümesi ile ilgili tartışmamıza dönelim. Açıklama kolaylığı yönünden Mandelbrot kümesinin, herhangi bir uygun anlamda, yinelenmediğini varsayacağım. Tümleyen küme tekrarlı sayılabilir olduğu için, kümenin kendisi tekrarlı sayılamaz. Sanırım, Mandelbrot kümesinin biçiminin, yinelenmeyen kümelerin ve yinelenmeyen matematik problemlerinin özellikleri hakkında bize vereceği bazı dersler var.</p>

  <p>III. Bölüm’de karşılaştığımız Şekil 3.2’i ele alalım. Kümenin büyük bir bölümünün, Şekil 4.13’de ‘A’ olarak işaretlediğim, büyük bir kalp biçiminde bölge ile kaplandığına dikkat ediniz. <span style="font-style:italic;">Kardioid</span> (yürek biçiminde) olarak adlandırılan şekil ve iç kısmı, matematiksel olarak, Argand düzleminde</p>

  <p>c = <span style="font-style:italic;">z - z<sup>2</sup></span></p>

  <p><span style="font-style:italic;">c</span> noktaları kümesi olarak tanımlanabilir; burada z, merkezden uzaklığı 1/2’den az olan bir kompleks sayıdır. Bu küme, kuşkusuz, daha önce değinilen anlamda, tekrarlı sayılabilir: Bölgenin iç kısmında bir noktaya uygulandığında bu noktanın gerçekten iç bölgede bulunduğunu doğrulayacak bir algoritma vardır. Gerçek algoritma yukardaki formülden kolayca elde edilir.</p>

  <p>Yürek biçimindeki ana bölgenin solundaki yuvarlak bölgeye (Şekil 4.13 - bölge B) bakınız. Yuvarlak bölgenin iç kısmı .</p>

  <p>c = <span style="font-style:italic;">z - 1</span></p>

  <p>noktaları kümesidir; burada z, merkezden 1/4’den az uzaklıktadır, Bu bölge gerçekten de bir diskin içidir, yani tam bir dairenin içinde kalan noktalar kümesidir. Bu bölge de, yukardaki anlamda, yinelenerek sayılabilir. Peki, yürek biçimi bölgenin üzerindeki ‘siğilimsi’ çıkıntılar nedir? Şekil 3.2’de yürek-biçimi bölgenin hemen üstünde ve hemen altında görülen ve Şekil 4.13’te C<sub>1</sub>, C<sub>2</sub> olarak işaretlenen bu yuvarlak damlaların küme terimleriyle bildirimi şöyledir:</p>

  <p><span style="font-style:italic;">c<sup>3</sup> + 2c<sup>2</sup> + (1 - z) c + (1 - z)<sup>3</sup></span> = <span style="font-style:italic;">0</span></p>

  <p style="text-align: center;"><img alt="" src="../Images/2_main-16.png" /></p>

  <p><b>Şekil 4.13. Mandelbrot kümesinin iç bölgesinin başlıca kısımları, basit algoritmik formüllerle tanımlanabilir.</b></p>

  <p>burada <span style="font-style:italic;">z,</span> merkezden 1/8 uzaklıktaki noktaların tümüdür. Aslında bu denklem bize yalnız C<sub>1</sub> ve C<sub>2</sub> yuvarlaklarını vermiyor, Şekil 3.2’de sol tarafta -Şekil 3.1’in ana bölgesi- ve Şekil 4.13'de C<sub>3</sub> ile işaretlenen kalp biçimindeki ‘yavru' şekilleri de vermektedir. Yine, söz konusu bu bölgeler (birlikte veya ayrı ayrı), yukarıdaki formül sayesinde (daha önce önerilmiş olan anlamda) yinelenerek sayılabilir kümeleri oluşturur.</p>

  <p>Mandelbrot kümesinin yinelenemeyen bir küme olduğunu kanıtlamaya çalıştığım gibi bir izle<span style="">ni</span>m yarattıysam da kümenin, iyi tanımlanmış ve çok karmaşık olmayan bazı algoritmalar kullanarak, en geniş bölgelerini açıklığa kavuşturduk. Öyle görünüyor ki, bu işlemi sürdürmeliyiz. Kümedeki en belirgin bölgeler ve kuşkusuz bu bölgelerin kapladığı alanın (tümünü kaplamadığı durumlarda) ezici yüzdesi, algoritmik olarak hesaplanabilir. Tahmin ettiğim gibi küme tümüyle gerçekte yinelenen bir küme değilse, algoritmalarımızla ulaşamadığımız bölgelerin, çok hassas ve ulaşılması zor bölgeler olması gerekir. Üstelik, böyle bir bölgeyi saptadığımız zaman, algoritmalarımızı bu bölgelere ulaşmamızı sağlayacak şekilde geliştirmek şansımız da artacaktır. Fakat yine de (yinelenemez varsayımım doğruysa) ulaşılamayan başka bölgeler olacak, bu bölgeler geliştirilmiş algoritmalarımızla bile ulaşamayacağımız duyarlılık ve karmaşıklıkların belirsizliğinde, daha da derinlerde, gizli kalacaklardır. Böyle bir aşamada sezgilerimizi, becerimizi ve çalışkanlığımızı devreye sokarak onlara ulaşabiliriz, fakat yine de ulaşamadıklarımız olacak ve bu böylece sürüp gidecektir.</p>

  <p>Sanırım bu durum, matematiğin çoğu kez, problemlerin zor olduğu ve büyük olasılıkla yinelenemez olduğu alanlarda faaliyet gösterdiğini açıklamaktadır. Belirli bir alanda karşılaşmamız olası en olağan problemler, basit algoritmik yöntemlerle, yüzyıllardır bilinen yöntemlerle çözülebilir. Fakat bazıları ağın gözlerinden kaçıp gidecek ve onları çözebilmemiz için daha zor yöntemler b<span style="">ulm</span>a<span style="">mı</span>z gerekecektir. Elimizden kaçıp kurtulanlar, kuşkusuz, matematikçileri tuzaklarına düşürecekler ve onları daha güçlü yöntemler bulmaya zorlayacaklardır. Bu gibi yöntemlerin, ilgili matematik alanının doğasının daha da derinliklerine inebilen sezgilere dayalı olması gerekecektir. Belki, fiziksel dünya anlayışımızda buna benzer bir şeyler vardır.</p>

  <p>Daha önce ele aldığımız sözcük problemlerinde ve düzlem karo kaplama problemlerinde bu tür bir şeyi göz ucuyla fark etmeğe başlayabiliriz (Bu alanlar, matematiksel yöntemlerin henüz pek ilerleme kaydetmediği alanlar olsa dahi). Basit bir uslamlama yöntemi kullanarak, belirli bir sözcüğü başka bir sözcükten türetemiyeceğimizi gösterebilmiştik. Daha karmaşık problemlerin üstesinden gelmek için çok daha karmaşık uslamlama yöntemlerini devreye sokabiliriz. Sözcük probleminde tek bir yöntemin yeterli olmayacağını biliyoruz fakat kontrolümüzden kaçabilen örnekleri biraz daha özenli ve duyarlı yöntemlerle inşa edebiliriz. Nasıl inşa edebileceğimizi anlar anlamaz, belli bir problemin algoritmamızın elinden kurtulduğunun kesinlikle <span style="font-style:italic;">farkına varır varmaz</span>, algoritmamızı, bu problemi kapsamına alacak şekilde geliştirebiliriz. Yalnız ‘eşit’ olmayan çift sözcükler algoritmamızdan kaçabildiğine göre, kaçtıklarının farkına varır varmaz ‘eşit’ olmadıklarını anlarız ve algoritmamızı buna göre uyarırız. Gelişen sezgilerimiz, algoritmanın gelişmesini sağlayacaktır!</p>

  <h2 id="udf9e4bba-114c-44e7-bcf1-a98237a65052">Karmaşıklık Teorisi</h2>

  <p>Algoritmaların doğası, varlığı ve sınırları ile ilgili olarak yukarda ve önceki bölümlerde ileri sürdüğüm savlar ‘ilke’ düzeyindeydi. Uygulanabilir olup olmadıklarını fazlaca irdelemedim. Algoritmalarının varolduğunu ve bu algoritmaları nasıl inşa edeceğimizi bildiğimiz problemler için bile, bunları yaşama geçirmek büyük beceri ve çaba gerektirebilir. Bazen birazcık beceri ve sezgi gücüyle, bir algoritmanın daha az karmaşık veya son derece hızlı olmasını sağlayabiliriz. Bu gibi konular çoğu kez çok ayrıntılı ve teknik olup, algoritmaların yapılanması, anlaşılması ve geliştirilmesi alanlarında değişik bağlamlarda bir hayli çalışma yapılmış, algoritma çalışmalarına ivme kazandırılmıştır. Bu konuda ayrıntılı bir tartışmaya girmeyi uygun görmüyorum. Ancak, bir algoritmanın süratinin ne ölçüde artırılabileceği ile ilgili bazı kesin sınırların bilinmekte veya tahmin edilmekte olduğuna değinmekte yarar görüyorum. Algoritmik özelliğe sahip matematik problemleri arasında bile, doğaları gereği, algoritmik çözümleri diğer çözümlerine göre çok daha zor olanlar vardır. Bazıları ancak çok yavaş algoritmalarla (veya, olağanüstü bellek alanı, vb. gerektiren algoritmalarla) çözümlenebilirler. Bu çeşit sorularla ilgilenen teori, <span style="font-style:italic;">karmaşıklık teorisi</span> adıyla tanınır.</p>

  <p>Karmaşıklık teorisi, <span style="font-style:italic;">bireysel</span> problemlerin algoritmik çözümlerinden çok, bir problem sınıfına dahil problemlere yanıt arayan genel bir algoritmanın bulunabileceği sonsuz problemler sınıflarıyla ilgilenir. Aynı sınıfa dahil farklı problemler farklı ‘boyutlar’a sahip olabilirler; bir problemin boyutu <span style="font-style:italic;">n</span> doğal sayısıyla ölçülebilir <span style="font-style:italic;">(n</span> sayısının problemin boyutunu nasıl belirleyeceğini birazdan anlatacağım). Belirli bir sınıfa dahil her bir problemin gereksinim duyacağı sürenin uzunluğu -veya, daha doğrusu, ilk aşamaların sayısı- <span style="font-style:italic;">n’e</span> bağlı bir <span style="font-style:italic;">N</span> doğal sayısıdır. Biraz daha açıklamak gerekirse, diyelim <span style="font-style:italic;">n</span> boyutundaki tüm problemler arasında algoritmanın kaydettiği en büyük aşama sayısı N’dir. Buna göre, <span style="font-style:italic;">n</span> büyüdükçe N'de büyüyecektir. Gerçekte <span style="font-style:italic;">N, n’e</span> göre çok daha hızlı büyüyecektir. Örneğin <span style="font-style:italic;">N,</span> yaklaşık <span style="font-style:italic;">n<sup>2</sup>,</span> veya <span style="font-style:italic;">n<sup>3</sup>,</span> veya belki <span style="font-style:italic;">2<sup>n</sup></span> (büyük <span style="font-style:italic;">n</span> değerleri için <span style="font-style:italic;">2<sup>n</sup>, n, n<sup>2</sup>, n<sup>3</sup>, n<sup>4</sup></span> ve <span style="font-style:italic;">n<sup>5</sup>’</span> hepsinden çok daha büyük, ve hatta her <span style="font-style:italic;">r</span> sabit sayısı için n<sup>r</sup>'den daha büyüktür) ile orantılı olacak, veya <span style="font-style:italic;">N,</span> yaklaşık olarak, diyelim</p>

  <p>2<sup>2<sup>n</sup></sup> (öncekinden de daha büyük bir sayı) ile orantılı olabilecektir.</p>

  <p>Kuşkusuz, ‘aşamaların’ sayısı, algoritmanın uygulandığı makinenin tipine bağlı olabilir. II, Bölüm’de tanımlanan tek bantlı ve oldukça yetersiz tipteki Turing makinesiyle <span style="font-style:italic;">N</span> sayısı, iki veya daha çok bantlı tip makineyle olduğundan daha hızlı artabilir (yani, makine daha yavaş çalışabilir). Bu gibi belirsizliklerden sakınmak amacıyla, hangi tip Turing makinesi kullanılırsa kullanılsın <span style="font-style:italic;">N</span> artış oranı ölçümünün aynı kategoride yer almaşım sağlayacak şekilde N’in, n’in bir fonksiyonu olarak, büyüyebildiği durumları kapsayan geniş bir sınıflandırma yapılır. P olarak anılan (‘polinom süre’) bir sınıf, <span style="font-style:italic;">n, n<sup>2</sup> , n<sup>3</sup>, n</span><sup>4</sup>, <span style="font-style:italic;">n<sup>5</sup></span> ...'lerden her birinin sabit katlarıyla<a href="../Text/notbolum4.xhtml#nba4XII" id="nba4XIId"><sup>[XII]</sup></a> verilen tüm hızları içerir. Başka bir deyişle, P kategorisindeki herhangi bir problem için (‘problem’ demekle, gerçekte, çözümleri için genel bir algoritmaya sahip problemler sınıfını kastediyorum)</p>

  <p><span style="font-style:italic;">N≤Kxn<sup>r</sup></span></p>

  <p>denklemine sahibiz; burada <span style="font-style:italic;">K</span> ve r sabit sayılardır (n’den bağımsız). Bunun anlamı N’in, bir sabit çarpan kere n’nin bir kuvvetinden büyük olmadığıdır.</p>

  <p>P kategorisine dahil basit ve tipik bir problem, kuşkusuz, iki sayının çarpımıdır. Bu konuya biraz daha açıklık getirmek için önce, <span style="font-style:italic;">n</span> sayısının, çarpılacak sayıları nasıl karakterize ettiğini tanımlamalıyım. Her sayının ikilik sistemde yazıldığını ve <span style="font-style:italic;">n/</span>2’in bu sayının ikilik sistemde yazılmış halinde her bir rakamını kaç kez geçtiğini gösterdiğini, yani n’nin toplam ikilik hane sayısını (dijit) verdiğini farz edelim (Sayılardan birisi diğerinden uzunsa, kısa olanıyla başlar ve diğerinin uzunluğuna ulaşıncaya kadar sola bir dizi sıfır ekleyebiliriz).</p>

  <p>Örneğin <span style="font-style:italic;">n</span> = 14 ise</p>

  <p><span style="font-weight:bold;">1011010x0011011</span></p>

  <p>olarak yazarız (aslında 1011010 x 11011 olarak yazılması gerekirken kısa sayıya sıfır ekleyerek yukarıdaki yazılımı elde ettik). Çarpımı, ikilik sistemde, 0x0 = 0, 0x1 = 0, 1x0 = 0, 1x1 = 1, 0 + 0 = 0, 0+1 = 1, 1 + 0 = 1, 1 + 1 = 10 olduğunu hatırlayarak, doğrudan doğruya şöyle yapabiliriz:</p>

  <p style="text-align: center;"><img alt="" src="../Images/2_main-17.png" /></p>

  <p>Tek tek yapılan çarpımların sayısı <span style="font-style:italic;">(n/2)</span> x <span style="font-style:italic;">(n/2) - n<sup>2</sup>/4’</span>dür; buna ek olarak en fazla <span style="font-style:italic;">(n<sup>2</sup>/4)</span> - (n/2)’toplama işlemi yapılabilir. Bu durumda toplam (<span style="font-style:italic;">n<sup>2</sup>/2)-(n/2)</span> bireysel aritmetik işlemi vardır; çarpım işlemindeki elde sayılar için ayrıca bir kaç yedek aşamayı da buna ekleyebiliriz. Böylece toplam aşama sayısı <span style="font-style:italic;">N = n<sup>2</sup>/2</span> olur ki (sadece en büyük terimi dikkate alarak) bu sayı kuşkusuz bir polinomdur.<a href="../Text/notbolum4.xhtml#nb413" id="nb413d"><sup>[13]</sup></a></p>

  <p>Bir problem sınıfı ile ilgili olarak genelde, problemin ‘boyutu’nun <span style="font-style:italic;">n</span> ölçüsünü, problemin bağımsız verilerini belirlemek için gerekli toplam ikilik hanelerin (bit) sayısı olarak alırız. Başka bir deyişle, verilen <span style="font-style:italic;">n</span> için, problemin 2<sup>n</sup> kadar farklı seçeneği söz konusudur (çünkü her hane, 0 veya 1 seçeneklerinden birisini alabilir, ve toplam <span style="font-style:italic;">n</span> hane vardır) ve bu seçeneklerin N sayısını geçmeyen aşamada algoritma tarafından düzgün bir şekilde ele alınması gerekmektedir.</p>

  <p>P kategorisinde yer almayan problemlerin(problem sınıflarının) birçok örneği vardır. Örneğin <span style="font-style:italic;">r</span> doğal sayısından 2<sup>2<sup>r</sup></sup> sayısını hesaplamak için, işlem bir yana, sadece yanıtını yazmak için 2<sup>r</sup> kadar aşamaya gereksinim vardır; bu işlemde <span style="font-style:italic;">n, r</span> sayısının ikilik gösterimindeki hane (digit) sayısıdır. 2<sup>2<sup>2<sup>r</sup></sup></sup> aşamasının hesaplanması, işlemine benzer aşamaları, vb. gerektirecektir! Bu problemler polinom problemlerden çok büyüktür ve kuşkusuz P sınıfına dahil değildirler.</p>

  <p>Yanıtları polinom sürede yazılabilen hattâ sağlamaları da aynı sürede yapılabilen sorular daha ilginçtir. Bu özelliğe sahip önemli bir problemler kategorisi (algoritmik çözümlenebilen soru sınıfları kategorisi) vardır. Böyle problemler NP problemleri (problem sınıfları) olarak anılır. NP’deki problemler sınıfına ait herhangi bir problemin çözümü varsa, algoritma bu çözümü verecektir ve polinom sürede bunun sağlamasını yapmak da mümkün olmalıdır. Problemin çözümü yoksa, algoritma bunu böyle olduğunu söyleyecektir, fakat polinom sürede veya başka şekilde, bu sonucun sağlanması gerekmiyecektir.<a href="../Text/notbolum4.xhtml#nb414" id="nb414d"><sup>[14]</sup></a></p>

  <p>NP problemleri, hem matematikte hem pratik dünyada birçok konuyla ilgili olarak ortaya çıkabilir. Basit bir matematiksel örnek vereyim: Bir grafikte 'Hamilton devresi’ adıyla anılan (son derece basit bir düşünceyi tanımlamak için oldukça iddialı bir ad) devreyi bulmak problemi. Burada ‘grafik’ ile kastedilen anlam, noktalardan veya ‘köşelerden, oluşan sonlu bir koleksiyon olup, belirli sayıdaki nokta çiftleri, grafiğin ‘kenarları’ denilen çizgilerle birleştirilmiştir (Biz, burda, geometrik veya ‘uzaklık’ gibi özelliklerle değil yalnız hangi noktanın hangi noktaya bağlandığı ile ilgileniyoruz.</p>

  <p style="text-align: center;"><img alt="" src="../Images/2_main-18.png" /></p>

  <p><b>Şekil 4.14. Hamilton devresi (koyu çizgiler) içeren bir grafik. Şekilde, okuyucunun bulmak isteyebileceği bir tane daha Hamilton devresi var.</b></p>

  <p>Bu nedenle, kenarların birbirinin üzerinden geçmesine aldırmadığımızı varsayarak, noktaların tümünün aynı düzlemde veya üç-boyutlu uzayda temsil edilip edilmedikleri gerçekten önemli değildir). <span style="font-style:italic;">Hamilton devresi,</span> grafiğin kenarlarından oluşan ve her köşeden (verteksden) bir kez geçen bir ilmekten ibarettir. Hamilton devresini içeren böyle bir grafik örneği Şekil 4.14’de verilmektedir. Hamilton devresi problemi, verilen bir grafikte bir Hamilton devresinin varolup olmadığına karar vermek ve varsa bunu açıkça göstermektir.</p>

  <p>Bir grafiği <span style="">ikilik</span> sayı sisteminde göstermenin çeşitli yolları vardır. Kullanılan yöntem pek önemli değildir. Örneğin noktaları 1, 2, 3, 4, 5... şeklinde numaralıyarak, uygun bir sırada çift çift dizmek olasıdır:</p>

  <p>(1, 2), (1, 3), (2, 3), (1, 4), (2, 4), (3, 4), (1, 5), (2, 5), (3, 5), (4, 5),</p>

  <p><a id="bookmark6_1"></a><span style="font-weight:bold;">(</span>1<span style="font-weight:bold;">,</span> 6<span style="font-weight:bold;">). ...</span></p>

  <p>Bu listedeki her bir çift yerine, eğer çift grafiğin kenarını gösteriyorsa T, göstermiyorsa ‘0’ koyarak ‘0'lar ve '1'lerden oluşan uyumlu başka bir liste yapabiliriz. Buna göre</p>

  <p><span style="font-weight:bold;">10010110110...</span></p>

  <p>dizisi, 1. köşenin 2. köşeye bunun 4. köşeye, 5. köşeye ... bağlandığını 3. köşenin, 4. köşeye, 5. köşeye... 4. köşenin, 5. köşeye... vb. bağlandığını gösterir (Şekil 4.14). İstenirse Hamilton devresi, kenarların bir alt-koleksiyonu olarak verilebilir ve bu durumda, çok daha fazla sayıda sıfıra sahip bir ikilik diziyle tanımlanabilir. Sağlama işlemi Hamilton devresini bulma sürecinden daha da hızlı gerçekleştirebilir. Bunun için, devrenin kenarlarının grafiğin orijinal kenarlarına ait olup olmadığını ve grafiğin her bir köşesinin, birisi iki kenarın her birinin ucunda olmak üzere tam iki kez kullanıldığını kontrol etmek suretiyle önerilen devrenin gerçekten bir devre olduğunu sınamak yeterlidir. Bu sağlama işlemi, polinom sürede kolayca gerçekleştirilebilir.</p>

  <p>Gerçekte bu problem yalnız NP problemi olmayıp <span style="font-style:italic;">tam-NP</span> olarak bilinen problemidir. Yani başka her NP problemi tam-NP problemine <span style="font-style:italic;">polinom</span> sürede çevrilebilir. Böylece, Hamilton devresi problemini polinom sürede çözebilecek algoritmayı bulacak, başka bir deyişle, Hamilton devresi probleminin aslında P’de yer aldığını gösterecek kadar zeki olan birisi NP problemlerinin gerçekte P’de yer aldığını da anlayacaktır. Böyle bir durum çok önemli ipuçları verebilir. Genel olarak, P’deki problemler oldukça büyük <span style="font-style:italic;">n</span> sayısı için, hızlı modern bir bilgisayarda 'kolay çözümlenir’ (yani, ‘makul bir sürede çözümlenebilir') olarak nitelenirken, P’de yer almayan NP problemleri, oldukça büyük <span style="font-style:italic;">n</span> sayısı için, bilgisayarın önceden tahmin edilebilen işlem hızında ne ölçüde artış öngörülürse görülsün ‘kolay çözümlenemez’ (yani, ‘ilke olarak çözümlenmesine karşın uygulamada çözümlenemez’) olarak nitelenir (Büyük bir <span style="font-style:italic;">n</span> sayısı için gerekli süre, P’de yer almayan NP problemi için öngörülen süreye kıyasla, evrenin yaşından daha uzun bir süreye dönüşür ki bu, pratik bir problem yönünden hiçbir işe yaramaz!). Hamilton devresi problemini polinom zamanda çözebilen herhangi bir <span style="">akıllı</span> algoritma, herhangi bir NP problemini de polinom zamanda çözebilen bir algoritmaya dönüştürebilir!</p>

  <p>Tam-NP<a href="../Text/notbolum4.xhtml#nb415" id="nb415d"><sup>[15]</sup></a> kapsamında yer alan başka bir problem ‘seyyar satıcı problemidir. Hamilton devresi problemini andıran bu problemde, her kenara verilmiş birer sayı vardır ve bu sayıların toplamının (satıcının seyahat ettiği ‘uzaklık’) minimum olması öngörülür. Seyyar satıcı probleminin polinom sürede çözümü de, diğer tüm NP problemlerinin polinom sürede çözümlenmesini sağlayacaktır (Bu problemin çözümü manşet haber olacaktır! Çünkü, özellikle, son yıllarda geliştirilen gizli şifre sistemleri, yine bir NP problemi olan büyük tam sayıların çarpanlarına ayrılması problemine dayanmaktadır. Bu problem polinom sürede çözülürse, bu gibi şifreler güçlü modern bilgisayarlar vasıtasıyla çözülebilir; problemin çözülememesi durumunda ise şifreler güvende olacaktır. Bkz. Gardner 1985),</p>

  <p>Uzmanların çoğu, Turing makinesine benzer bir aygıt kullanılarak, bir tam-NP probleminin polinom sürede çözülmesinin gerçekte olanaksız olduğunu ve sonuçta P ve NP’in aynı olmadığına inanmaktadırlar. Haklı olabilirler ama bugüne değin bunu kanıtlayan olmadı. Bu problem bugün karmaşıklık teorisinin çözülememiş en önemli problemidir.</p>

  <h2 id="u51716c97-c4a2-4d23-910b-65ff6a7ff520">Fiziksel Nesnelerde Karmaşıklık ve Hesapedilebilirlik</h2>

  <p>Karmaşıklık teorisi, bu kitapta ele aldığımız konular yönünden önemlidir çünkü, nesnelerin algoritmik olup olmadığı sorusundan oldukça ayrı bir konuyu gündeme getirir: Algoritmik oldukları bilinen şeyler gerçekten yararlı bir şekilde algoritmik midir? Gelecek bölümlerde karmaşıklık teorisinden çok hesaplanabilirlik teorisini tartışacağım. Çünkü, hesaplanabilirlik sorusunun aksine, karmaşıklık teorisi kapsamındaki konuların, ussal olguların odağını oluşturmadığını düşünmek eğilimindeyim (gerekçelerim oldukça yetersiz olsa bile). Üstelik, algoritmaların uygulanabilirliğine ilişkin sorulara, karmaşıklık teorisinin bugünkü durumuyla, ancak şöyle bir değinebileceği kanısındayım.</p>

  <p>Ancak, karmaşıklığın önemi konusunda yanılıyor da olabilirim. Daha sonra değineceğim gibi (IX. Bölüm,) <span style="font-style:italic;">gerçek fiziksel nesneler</span> ile ilgili karmaşıklık teorisi, şu âna kadar tartıştığımızdan çok farklı olabilir. Böyle bir olası farkı gözler önüne sermek için, kuantum mekaniğinin gizemli özelliklerinden bazılarını irdelememiz gerekecektir. Bazılarının önemi çok daha büyük boyutlara ulaşan birçok olguyu ve bu arada atomların ve moleküllerin davranışlarını inceleyen kuantum mekaniği gizemli ama o kadar da güçlü şekilde doğrudur. Bu teoriyle VI. Bölüm’de tanışacağız. David Deutsch’a, (1985) göre, bir ‘kuantum bilgisayarı’ inşa etmek ‘ilke olarak’ olasıdır. Deutsch, bu bilgisayar için P’de yer almayan ama bu aygıt sayesinde polinom sürede çözülebilen problemlerin (problem sınıfları) varolduğunu ileri sürmektedir. Bir kuantum bilgisayarı olarak davranabilen (güvenilir) gerçek bir fiziksel aygıtın nasıl inşa edilebileceği bugüne değin açıklığa kavuşturulmamıştır. Üstelik, söz konusu problemler sınıfı kuşkusuz yapaydır, ama fiziksel bir kuantum aygıtının bir Turing makinesi üzerine inşa edilmesine ilişkin teorik olasılık bize pek erişilmez gibi görünmüyor.</p>

  <p>'Fiziksel bir aygıt’ olduğu tartışmasına giriştiğim insan beyni, karmaşık olduğu kadar şaşırtıcı ölçüde özenli ve duyarlı tasarıma sahip beynimizin kendisi sakın, kuantum teoris<span style="">inin</span> gizeminden yararlanıyor olmasın? Kuantum sonuçlarının, problemlerin çözümünde veya yargıların oluşturulmasında yararlı bir şekilde kullanılabilecekleri yöntemlerin farkında mıyız acaba? Günümüzün kuantum teorisinin sınırlarını zorlayarak sağlayacağı üstünlüklerden yararlanmamız mümkün mü? Fiziksel aygıtların, Turing makinelerinin karmaşıklık teorisi yönünde geliştirilerek inşa edilmeleri gerçekten mümkün olabilir mi? Ya gerçek fiziksel aygıtlarla ilgili hesapedilebilirlik teorisinden ne haber?</p>

  <p>Bu gibi soruları yanıtlayabilmek için tümüyle matematiksel olan konulardan uzaklaşarak, gelecek bölümlerde, fiziksel dünyanın gerçekte nasıl davrandığını araştıracağız.</p>
</body>
</html>
